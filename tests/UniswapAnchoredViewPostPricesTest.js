
// @notice UniswapAnchoredView `postPrices` test
// Based on data from Coinbase oracle https://api.pro.coinbase.com/oracle and Uniswap token pairs at July 2nd 2020.
const { sendRPC } = require('./Helpers');

function address(n) {
    return `0x${n.toString(16).padStart(40, "0")}`;
  }
  function uint(n) {
    return web3.utils.toBN(n).toString();
  }

  function keccak256(str) {
    return web3.utils.keccak256(str);
  }

  function numToHex(num) {
    return web3.utils.numberToHex(num);
  }

  async function setupTokenPairs() {
    // Reversed market for ETH, read value of ETH in USDC
    const usdc_eth_pair = await deploy("MockUniswapTokenPair", [
      "1865335786147",
      "8202340665419053945756",
      "1593755855",
      "119785032308978310142960133641565753500432674230537",
      "5820053774558372823476814618189",
    ]);

    // Initialize DAI_ETH pair with values from mainnet
    const dai_eth_pair = await deploy("MockUniswapTokenPair", [
      "3435618131150076101237553",
      "15407572689721099289685",
      "1593754275",
      "100715171900432184428711184053633835098",
      "5069668089169215245120760905619375569156736",
    ]);

    // Initialize REP_ETH pair with values from mainnet
    const rep_eth_pair = await deploy("MockUniswapTokenPair", [
      "40867690797665090689823",
      "3089126268851209725535",
      "1593751741",
      "1326188372862607823298077160955402643895",
      "315226499991023307900665225550194785606382",
    ]);

    // Initialize BAT_ETH pair with values from mainnet
    const bat_eth_pair = await deploy("MockUniswapTokenPair", [
     "2809215824116494014601294",
     "3000910749924336260251",
     "1593751965",
     "22657836903223019490474748660313426663",
     "22353658718734403427774753736831427982055589"
    ]);

    // Initialize ETH_ZRX pair with values from mainnet
    // Reversed market
    const eth_zrx_pair = await deploy("MockUniswapTokenPair", [
      "259245497861929182740",
      "164221696097447914276729",
      "1593752326",
      "13610654639402610907794611037761488370001743",
      "30665287778536822167996154892216941694",
    ]);

    // Initialize WBTC_ETH pair with values from mainnet
    const wbtc_eth_pair = await deploy("MockUniswapTokenPair", [
      "4744946699",
      "1910114633221652017296",
      "1593753186",
      "8436575757851690213986884101797344191977744209825804",
      "49529064100184996951568929095",
    ]);

    // Initialize COMP_ETH pair with values from mainnet
    const comp_eth_pair = await deploy("MockUniswapTokenPair", [
      "2726069269242972517844",
      "2121223809443892142647",
      "1593738503",
      "7047295063332907798400663297656723228030",
      "10471832919000882624476515664573920963717"
    ])

    // Initialize LINK_ETH pair with values from mainnet
    const link_eth_pair = await deploy("MockUniswapTokenPair", [
     "115522168522463195428450",
     "2448717634007234031730",
     "1593750856",
     "379784304220418702903383781057063011507",
     "1098123734917468235191126600400328121343356",
    ])

    // Initialize ETH_KNC pair with values from mainnet
    // Reversed market
    const eth_knc_pair = await deploy("MockUniswapTokenPair", [
      "2071741256888346573966",
      "283551022700267758624550",
      "1593751102",
      "5224005871622835504950986888037007421616163",
      "84792274943467211540214022183090944437",
    ])

    return {
      USDC_ETH: usdc_eth_pair._address,
      DAI_ETH: dai_eth_pair._address,
      REP_ETH: rep_eth_pair._address,
      BAT_ETH: bat_eth_pair._address,
      ETH_ZRX: eth_zrx_pair._address,
      WBTC_ETH: wbtc_eth_pair._address,
      COMP_ETH: comp_eth_pair._address,
      ETH_KNC: eth_knc_pair._address,
      LINK_ETH: link_eth_pair._address,
    }
  }

  const PriceSource = {
    FIXED_ETH: 0,
    FIXED_USD: 1,
    REPORTER: 2
  };

  describe("UniswapAnchoredView, postPrices test", () => {
    const reporter = "0xfCEAdAFab14d46e20144F48824d0C09B1a03F2BC";

    it("basic scenario, use real world data", async () => {
      const anchorMantissa = numToHex(1e17);
      const priceData = await deploy("OpenOraclePriceData", []);
      const anchorPeriod = 60;

      const pairs = await setupTokenPairs();
      const tokenConfigs = [
        {cToken: address(1), underlying: address(1), symbolHash: keccak256("ETH"), baseUnit: uint(1e6), priceSource: PriceSource.REPORTER, fixedPrice: 0, uniswapMarket: pairs.USDC_ETH, isUniswapReversed: true},
        {cToken: address(2), underlying: address(2), symbolHash: keccak256("DAI"), baseUnit: uint(1e18), priceSource: PriceSource.REPORTER, fixedPrice: 0, uniswapMarket: pairs.DAI_ETH, isUniswapReversed: false},
        {cToken: address(3), underlying: address(3), symbolHash: keccak256("REP"), baseUnit: uint(1e18), priceSource: PriceSource.REPORTER, fixedPrice: 0, uniswapMarket: pairs.REP_ETH, isUniswapReversed: false},
        {cToken: address(4), underlying: address(4), symbolHash: keccak256("BAT"), baseUnit: uint(1e18), priceSource: PriceSource.REPORTER, fixedPrice: 0, uniswapMarket: pairs.BAT_ETH, isUniswapReversed: false},
        {cToken: address(5), underlying: address(5), symbolHash: keccak256("ZRX"), baseUnit: uint(1e18), priceSource: PriceSource.REPORTER, fixedPrice: 0, uniswapMarket: pairs.ETH_ZRX, isUniswapReversed: true},
        {cToken: address(6), underlying: address(6), symbolHash: keccak256("BTC"), baseUnit: uint(1e8), priceSource: PriceSource.REPORTER, fixedPrice: 0, uniswapMarket: pairs.WBTC_ETH, isUniswapReversed: false},
        {cToken: address(7), underlying: address(7), symbolHash: keccak256("COMP"), baseUnit: uint(1e18), priceSource: PriceSource.REPORTER, fixedPrice: 0, uniswapMarket: pairs.COMP_ETH, isUniswapReversed: false},
        {cToken: address(8), underlying: address(8), symbolHash: keccak256("KNC"), baseUnit: uint(1e18), priceSource: PriceSource.REPORTER, fixedPrice: 0, uniswapMarket: pairs.ETH_KNC, isUniswapReversed: true},
        {cToken: address(9), underlying: address(9), symbolHash: keccak256("LINK"), baseUnit: uint(1e18), priceSource: PriceSource.REPORTER, fixedPrice: 0, uniswapMarket: pairs.LINK_ETH, isUniswapReversed: false},
      ];

      const uniswapAnchoredView = await deploy("UniswapAnchoredView", [priceData._address, reporter, anchorMantissa, anchorPeriod, tokenConfigs]);
      await sendRPC(web3, 'evm_increaseTime', [30 * 60]);

      const messages = [
        "0x0000000000000000000000000000000000000000000000000000000000000080000000000000000000000000000000000000000000000000000000005efebe9800000000000000000000000000000000000000000000000000000000000000c0000000000000000000000000000000000000000000000000000000021e69e1300000000000000000000000000000000000000000000000000000000000000006707269636573000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000034254430000000000000000000000000000000000000000000000000000000000",
        "0x0000000000000000000000000000000000000000000000000000000000000080000000000000000000000000000000000000000000000000000000005efebe9800000000000000000000000000000000000000000000000000000000000000c0000000000000000000000000000000000000000000000000000000000d84ec180000000000000000000000000000000000000000000000000000000000000006707269636573000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000034554480000000000000000000000000000000000000000000000000000000000",
        "0x0000000000000000000000000000000000000000000000000000000000000080000000000000000000000000000000000000000000000000000000005efebe2000000000000000000000000000000000000000000000000000000000000000c000000000000000000000000000000000000000000000000000000000000f81f90000000000000000000000000000000000000000000000000000000000000006707269636573000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000034441490000000000000000000000000000000000000000000000000000000000",
        "0x0000000000000000000000000000000000000000000000000000000000000080000000000000000000000000000000000000000000000000000000005efebe9800000000000000000000000000000000000000000000000000000000000000c000000000000000000000000000000000000000000000000000000000010798780000000000000000000000000000000000000000000000000000000000000006707269636573000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000035245500000000000000000000000000000000000000000000000000000000000",
        "0x0000000000000000000000000000000000000000000000000000000000000080000000000000000000000000000000000000000000000000000000005efebe9800000000000000000000000000000000000000000000000000000000000000c0000000000000000000000000000000000000000000000000000000000005707f0000000000000000000000000000000000000000000000000000000000000006707269636573000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000035a52580000000000000000000000000000000000000000000000000000000000",
        "0x0000000000000000000000000000000000000000000000000000000000000080000000000000000000000000000000000000000000000000000000005efebe9800000000000000000000000000000000000000000000000000000000000000c0000000000000000000000000000000000000000000000000000000000003b8920000000000000000000000000000000000000000000000000000000000000006707269636573000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000034241540000000000000000000000000000000000000000000000000000000000",
        "0x0000000000000000000000000000000000000000000000000000000000000080000000000000000000000000000000000000000000000000000000005efebe9800000000000000000000000000000000000000000000000000000000000000c0000000000000000000000000000000000000000000000000000000000018f18c0000000000000000000000000000000000000000000000000000000000000006707269636573000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000034b4e430000000000000000000000000000000000000000000000000000000000",
        "0x0000000000000000000000000000000000000000000000000000000000000080000000000000000000000000000000000000000000000000000000005efebe9800000000000000000000000000000000000000000000000000000000000000c0000000000000000000000000000000000000000000000000000000000049208c0000000000000000000000000000000000000000000000000000000000000006707269636573000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000044c494e4b00000000000000000000000000000000000000000000000000000000"
        ];

        const signatures = [
        "0xe64be3c6153c0f450062ebb3bb93b48d8e2bec11030dbe7b639ab6c78a5edf688f4fd9ba51c7589c15e384b952a2dc4943d402871163aca12197fd08568c4b9f000000000000000000000000000000000000000000000000000000000000001c",
        "0xb8ba87c37228468f9d107a97eeb92ebd49a50993669cab1737fea77e5b884f2591affbf4058bcfa29e38756021deeafaeeab7a5c4f5ce584c7d1e12346c88d4e000000000000000000000000000000000000000000000000000000000000001b",
        "0xac0731a325943a92f3745be5853f54ae110d889a408805e076ad9b5bc0bb1f4c1a994aebfb27a09156234fd1b27abf0fc19f667ea48c27a0c2a5d58c0243b99b000000000000000000000000000000000000000000000000000000000000001c",
        "0x77058eaa98c77df280e069fb3c751b95aff57827a730458b48d773721432c42293f3b5d21b475169a59140e31196d333ca0f2b5935d2d86563df7a4e5cbc1e24000000000000000000000000000000000000000000000000000000000000001c",
        "0x4758081209589c08db900e84d32393b3a37d9041a8e722e977dc3fff8affe0847d1dcb5c80496ea2f9314b3d6fcde03f8e7a896ba28dde6e2a003972da9e2b25000000000000000000000000000000000000000000000000000000000000001b",
        "0x8f69f85dc792d657238a9a766b3cdb6c17c789d24a2b4c0d59eec079602aecfaf3d79d87a4ed430ef6889c46e03c82b5c616f9b968c4b757a89c1792a02dee13000000000000000000000000000000000000000000000000000000000000001b",
        "0x25005922d67f6f446667de7e3052a2e97cf6b74bd01be62b478e16e3d72a3ecc5582fb44a3501fa359c2d6b5794844713c584740938e4012a1b0e3371e61a8a6000000000000000000000000000000000000000000000000000000000000001b",
        "0xe393df120a0d95b8dea2ab693e4c89b4faf867c66636305bb1199e53cff95f43a22889e148a5bd85105173a102c3167f7716d4eca6a89a0120bef6479e812011000000000000000000000000000000000000000000000000000000000000001b"
        ];

        // No data for COMP from Coinbase so far, it is not added to the oracle yet
        const symbols = ["BTC", "ETH", "DAI", "REP", "ZRX", "BAT", "KNC", "LINK"];

        await send(uniswapAnchoredView, "postPrices", [messages, signatures, symbols]);

        const btc_price = await call(uniswapAnchoredView, "price", ["BTC"]);
        expect(btc_price).toBe("9100190000");

        const eth_price = await call(uniswapAnchoredView, "price", ["ETH"]);
        expect(eth_price).toBe("226815000");

        const dai_price = await call(uniswapAnchoredView, "price", ["DAI"]);
        expect(dai_price).toBe("1016313");

        const rep_price = await call(uniswapAnchoredView, "price", ["REP"]);
        expect(rep_price).toBe("17275000");

        const zrx_price = await call(uniswapAnchoredView, "price", ["ZRX"]);
        expect(zrx_price).toBe("356479");

        const bat_price = await call(uniswapAnchoredView, "price", ["BAT"]);
        expect(bat_price).toBe("243858");

        const knc_price = await call(uniswapAnchoredView, "price", ["KNC"]);
        expect(knc_price).toBe("1634700");

        const link_price = await call(uniswapAnchoredView, "price", ["LINK"]);
        expect(link_price).toBe("4792460");
      })
    })