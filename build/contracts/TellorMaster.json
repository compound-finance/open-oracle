{
  "contractName": "TellorMaster",
  "abi": [
    {
      "constant": true,
      "inputs": [
        {
          "name": "_timestamp",
          "type": "uint256"
        }
      ],
      "name": "getRequestIdByTimestamp",
      "outputs": [
        {
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "name": "_requestId",
          "type": "uint256"
        },
        {
          "name": "_timestamp",
          "type": "uint256"
        }
      ],
      "name": "getSubmissionsByTimestamp",
      "outputs": [
        {
          "name": "",
          "type": "uint256[5]"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "name": "_data",
          "type": "bytes32"
        }
      ],
      "name": "getAddressVars",
      "outputs": [
        {
          "name": "",
          "type": "address"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "getSymbol",
      "outputs": [
        {
          "name": "",
          "type": "string"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "getName",
      "outputs": [
        {
          "name": "",
          "type": "string"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "totalSupply",
      "outputs": [
        {
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "getVariablesOnDeck",
      "outputs": [
        {
          "name": "",
          "type": "uint256"
        },
        {
          "name": "",
          "type": "uint256"
        },
        {
          "name": "",
          "type": "string"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "name": "_request",
          "type": "bytes32"
        }
      ],
      "name": "getRequestIdByQueryHash",
      "outputs": [
        {
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "name": "_requestId",
          "type": "uint256"
        }
      ],
      "name": "getLastNewValueById",
      "outputs": [
        {
          "name": "",
          "type": "uint256"
        },
        {
          "name": "",
          "type": "bool"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "name": "_requestId",
          "type": "uint256"
        },
        {
          "name": "_timestamp",
          "type": "uint256"
        }
      ],
      "name": "isInDispute",
      "outputs": [
        {
          "name": "",
          "type": "bool"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "name": "_requestId",
          "type": "uint256"
        }
      ],
      "name": "getNewValueCountbyRequestId",
      "outputs": [
        {
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "name": "_user",
          "type": "address"
        },
        {
          "name": "_blockNumber",
          "type": "uint256"
        }
      ],
      "name": "balanceOfAt",
      "outputs": [
        {
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "name": "_data",
          "type": "bytes32"
        }
      ],
      "name": "getUintVar",
      "outputs": [
        {
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "name": "_index",
          "type": "uint256"
        }
      ],
      "name": "getRequestIdByRequestQIndex",
      "outputs": [
        {
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "name": "_challenge",
          "type": "bytes32"
        },
        {
          "name": "_miner",
          "type": "address"
        }
      ],
      "name": "didMine",
      "outputs": [
        {
          "name": "",
          "type": "bool"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "name": "_requestId",
          "type": "uint256"
        },
        {
          "name": "_timestamp",
          "type": "uint256"
        }
      ],
      "name": "getMinersByRequestIdAndTimestamp",
      "outputs": [
        {
          "name": "",
          "type": "address[5]"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "name": "_user",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "name": "_staker",
          "type": "address"
        }
      ],
      "name": "getStakerInfo",
      "outputs": [
        {
          "name": "",
          "type": "uint256"
        },
        {
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "name": "_requestID",
          "type": "uint256"
        },
        {
          "name": "_index",
          "type": "uint256"
        }
      ],
      "name": "getTimestampbyRequestIDandIndex",
      "outputs": [
        {
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "name": "_disputeId",
          "type": "uint256"
        },
        {
          "name": "_data",
          "type": "bytes32"
        }
      ],
      "name": "getDisputeUintVars",
      "outputs": [
        {
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "name": "_requestId",
          "type": "uint256"
        },
        {
          "name": "_timestamp",
          "type": "uint256"
        }
      ],
      "name": "retrieveData",
      "outputs": [
        {
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "name": "_user",
          "type": "address"
        },
        {
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "allowedToTrade",
      "outputs": [
        {
          "name": "",
          "type": "bool"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "getCurrentVariables",
      "outputs": [
        {
          "name": "",
          "type": "bytes32"
        },
        {
          "name": "",
          "type": "uint256"
        },
        {
          "name": "",
          "type": "uint256"
        },
        {
          "name": "",
          "type": "string"
        },
        {
          "name": "",
          "type": "uint256"
        },
        {
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "name": "_disputeId",
          "type": "uint256"
        },
        {
          "name": "_address",
          "type": "address"
        }
      ],
      "name": "didVote",
      "outputs": [
        {
          "name": "",
          "type": "bool"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "name": "_disputeId",
          "type": "uint256"
        }
      ],
      "name": "getAllDisputeVars",
      "outputs": [
        {
          "name": "",
          "type": "bytes32"
        },
        {
          "name": "",
          "type": "bool"
        },
        {
          "name": "",
          "type": "bool"
        },
        {
          "name": "",
          "type": "bool"
        },
        {
          "name": "",
          "type": "address"
        },
        {
          "name": "",
          "type": "address"
        },
        {
          "name": "",
          "type": "address"
        },
        {
          "name": "",
          "type": "uint256[9]"
        },
        {
          "name": "",
          "type": "int256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "getRequestQ",
      "outputs": [
        {
          "name": "",
          "type": "uint256[51]"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "name": "_requestId",
          "type": "uint256"
        },
        {
          "name": "_timestamp",
          "type": "uint256"
        }
      ],
      "name": "getMinedBlockNum",
      "outputs": [
        {
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "name": "_hash",
          "type": "bytes32"
        }
      ],
      "name": "getDisputeIdByDisputeHash",
      "outputs": [
        {
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "name": "_user",
          "type": "address"
        },
        {
          "name": "_spender",
          "type": "address"
        }
      ],
      "name": "allowance",
      "outputs": [
        {
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "name": "_requestId",
          "type": "uint256"
        },
        {
          "name": "_data",
          "type": "bytes32"
        }
      ],
      "name": "getRequestUintVars",
      "outputs": [
        {
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "name": "_requestId",
          "type": "uint256"
        }
      ],
      "name": "getRequestVars",
      "outputs": [
        {
          "name": "",
          "type": "string"
        },
        {
          "name": "",
          "type": "string"
        },
        {
          "name": "",
          "type": "bytes32"
        },
        {
          "name": "",
          "type": "uint256"
        },
        {
          "name": "",
          "type": "uint256"
        },
        {
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "getLastNewValue",
      "outputs": [
        {
          "name": "",
          "type": "uint256"
        },
        {
          "name": "",
          "type": "bool"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "name": "_tellorContract",
          "type": "address"
        }
      ],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "payable": true,
      "stateMutability": "payable",
      "type": "fallback"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "name": "_newTellor",
          "type": "address"
        }
      ],
      "name": "NewTellorAddress",
      "type": "event"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "_newDeity",
          "type": "address"
        }
      ],
      "name": "changeDeity",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "_tellorContract",
          "type": "address"
        }
      ],
      "name": "changeTellorContract",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "metadata": "{\"compiler\":{\"version\":\"0.5.8+commit.23d335f2\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"constant\":true,\"inputs\":[{\"name\":\"_timestamp\",\"type\":\"uint256\"}],\"name\":\"getRequestIdByTimestamp\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_requestId\",\"type\":\"uint256\"},{\"name\":\"_timestamp\",\"type\":\"uint256\"}],\"name\":\"getSubmissionsByTimestamp\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256[5]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_data\",\"type\":\"bytes32\"}],\"name\":\"getAddressVars\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getSymbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getName\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getVariablesOnDeck\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_request\",\"type\":\"bytes32\"}],\"name\":\"getRequestIdByQueryHash\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_requestId\",\"type\":\"uint256\"}],\"name\":\"getLastNewValueById\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_requestId\",\"type\":\"uint256\"},{\"name\":\"_timestamp\",\"type\":\"uint256\"}],\"name\":\"isInDispute\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_requestId\",\"type\":\"uint256\"}],\"name\":\"getNewValueCountbyRequestId\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newDeity\",\"type\":\"address\"}],\"name\":\"changeDeity\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_user\",\"type\":\"address\"},{\"name\":\"_blockNumber\",\"type\":\"uint256\"}],\"name\":\"balanceOfAt\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_data\",\"type\":\"bytes32\"}],\"name\":\"getUintVar\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"getRequestIdByRequestQIndex\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_challenge\",\"type\":\"bytes32\"},{\"name\":\"_miner\",\"type\":\"address\"}],\"name\":\"didMine\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_requestId\",\"type\":\"uint256\"},{\"name\":\"_timestamp\",\"type\":\"uint256\"}],\"name\":\"getMinersByRequestIdAndTimestamp\",\"outputs\":[{\"name\":\"\",\"type\":\"address[5]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_staker\",\"type\":\"address\"}],\"name\":\"getStakerInfo\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_requestID\",\"type\":\"uint256\"},{\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"getTimestampbyRequestIDandIndex\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_disputeId\",\"type\":\"uint256\"},{\"name\":\"_data\",\"type\":\"bytes32\"}],\"name\":\"getDisputeUintVars\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_requestId\",\"type\":\"uint256\"},{\"name\":\"_timestamp\",\"type\":\"uint256\"}],\"name\":\"retrieveData\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_user\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"allowedToTrade\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getCurrentVariables\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"string\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_disputeId\",\"type\":\"uint256\"},{\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"didVote\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tellorContract\",\"type\":\"address\"}],\"name\":\"changeTellorContract\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_disputeId\",\"type\":\"uint256\"}],\"name\":\"getAllDisputeVars\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"},{\"name\":\"\",\"type\":\"bool\"},{\"name\":\"\",\"type\":\"bool\"},{\"name\":\"\",\"type\":\"bool\"},{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"uint256[9]\"},{\"name\":\"\",\"type\":\"int256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getRequestQ\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256[51]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_requestId\",\"type\":\"uint256\"},{\"name\":\"_timestamp\",\"type\":\"uint256\"}],\"name\":\"getMinedBlockNum\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_hash\",\"type\":\"bytes32\"}],\"name\":\"getDisputeIdByDisputeHash\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_user\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_requestId\",\"type\":\"uint256\"},{\"name\":\"_data\",\"type\":\"bytes32\"}],\"name\":\"getRequestUintVars\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_requestId\",\"type\":\"uint256\"}],\"name\":\"getRequestVars\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"},{\"name\":\"\",\"type\":\"string\"},{\"name\":\"\",\"type\":\"bytes32\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getLastNewValue\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_tellorContract\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"_newTellor\",\"type\":\"address\"}],\"name\":\"NewTellorAddress\",\"type\":\"event\"}],\"devdoc\":{\"details\":\"This is the Master contract with all tellor getter functions and delegate call to Tellor. \\r The logic for the functions on this contract is saved on the TellorGettersLibrary, TellorTransfer, \\r TellorGettersLibrary, and TellorStake\\r\",\"methods\":{\"allowance(address,address)\":{\"params\":{\"_spender\":\"address\\r\",\"_user\":\"address\\r\"},\"return\":\"Returns the remaining allowance of tokens granted to the _spender from the _user\\r\"},\"allowedToTrade(address,uint256)\":{\"details\":\"This function returns whether or not a given user is allowed to trade a given amount  \\r\",\"params\":{\"_amount\":\"uint of amount\\r\",\"_user\":\"address\\r\"},\"return\":\"true if the user is alloed to trade the amount specified\\r\"},\"balanceOf(address)\":{\"details\":\"Gets balance of owner specified\\r\",\"params\":{\"_user\":\"is the owner address used to look up the balance\\r\"},\"return\":\"Returns the balance associated with the passed in _user\\r\"},\"balanceOfAt(address,uint256)\":{\"details\":\"Queries the balance of _user at a specific _blockNumber\\r\",\"params\":{\"_blockNumber\":\"The block number when the balance is queried\\r\",\"_user\":\"The address from which the balance will be retrieved\\r\"},\"return\":\"The balance at _blockNumber\\r\"},\"changeDeity(address)\":{\"details\":\"Gets the 5 miners who mined the value for the specified requestId/_timestamp \\rOnly needs to be in library\\r\",\"params\":{\"_newDeity\":\"the new Deity in the contract\\r\"}},\"changeTellorContract(address)\":{\"details\":\"allows for the deity to make fast upgrades.  Deity should be 0 address if decentralized\\r\",\"params\":{\"_tellorContract\":\"the address of the new Tellor Contract\\r\"}},\"constructor\":{\"details\":\"The constructor sets the original `tellorStorageOwner` of the contract to the sender\\r account, the tellor contract to the Tellor master address and owner to the Tellor master owner address \\r\",\"params\":{\"_tellorContract\":\"is the address for the tellor contract\\r\"}},\"didMine(bytes32,address)\":{\"details\":\"This function tells you if a given challenge has been completed by a given miner\\r\",\"params\":{\"_challenge\":\"the challenge to search for\\r\",\"_miner\":\"address that you want to know if they solved the challenge\\r\"},\"return\":\"true if the _miner address provided solved the \\r\"},\"didVote(uint256,address)\":{\"details\":\"Checks if an address voted in a given dispute\\r\",\"params\":{\"_address\":\"to look up\\r\",\"_disputeId\":\"to look up\\r\"},\"return\":\"bool of whether or not party voted\\r\"},\"getAddressVars(bytes32)\":{\"details\":\"allows Tellor to read data from the addressVars mapping\\r\",\"params\":{\"_data\":\"is the keccak256(\\\"variable_name\\\") of the variable that is being accessed. \\r These are examples of how the variables are saved within other functions:\\r addressVars[keccak256(\\\"_owner\\\")]\\r addressVars[keccak256(\\\"tellorContract\\\")]\\r\"}},\"getAllDisputeVars(uint256)\":{\"details\":\"Gets all dispute variables\\r\",\"params\":{\"_disputeId\":\"to look up\\r\"},\"return\":\"bytes32 hash of dispute \\rbool executed where true if it has been voted on\\rbool disputeVotePassed\\rbool isPropFork true if the dispute is a proposed fork\\raddress of reportedMiner\\raddress of reportingParty\\raddress of proposedForkAddress\\ruint of requestId\\ruint of timestamp\\ruint of value\\ruint of minExecutionDate\\ruint of numberOfVotes\\ruint of blocknumber\\ruint of minerSlot\\ruint of quorum\\ruint of fee\\rint count of the current tally\\r\"},\"getCurrentVariables()\":{\"details\":\"Getter function for variables for the requestId being currently mined(currentRequestId)\\r\",\"return\":\"current challenge, curretnRequestId, level of difficulty, api/query string, and granularity(number of decimals requested), total tip for the request \\r\"},\"getDisputeIdByDisputeHash(bytes32)\":{\"details\":\"Checks if a given hash of miner,requestId has been disputed\\r\",\"params\":{\"_hash\":\"is the sha256(abi.encodePacked(_miners[2],_requestId));\\r\"},\"return\":\"uint disputeId\\r\"},\"getDisputeUintVars(uint256,bytes32)\":{\"details\":\"Checks for uint variables in the disputeUintVars mapping based on the disuputeId\\r\",\"params\":{\"_data\":\"the variable to pull from the mapping. _data = keccak256(\\\"variable_name\\\") where variable_name is \\r the variables/strings used to save the data in the mapping. The variables names are  \\r commented out under the disputeUintVars under the Dispute struct\\r\",\"_disputeId\":\"is the dispute id;\\r\"},\"return\":\"uint value for the bytes32 data submitted\\r\"},\"getLastNewValue()\":{\"details\":\"Gets the a value for the latest timestamp available\\r\",\"return\":\"value for timestamp of last proof of work submited\\rtrue if the is a timestamp for the lastNewValue\\r\"},\"getLastNewValueById(uint256)\":{\"details\":\"Gets the a value for the latest timestamp available\\r\",\"params\":{\"_requestId\":\"being requested\\r\"},\"return\":\"value for timestamp of last proof of work submited and if true if it exist or 0 and false if it doesn't\\r\"},\"getMinedBlockNum(uint256,uint256)\":{\"details\":\"Gets blocknumber for mined timestamp \\r\",\"params\":{\"_requestId\":\"to look up\\r\",\"_timestamp\":\"is the timestamp to look up blocknumber\\r\"},\"return\":\"uint of the blocknumber which the dispute was mined\\r\"},\"getMinersByRequestIdAndTimestamp(uint256,uint256)\":{\"details\":\"Gets the 5 miners who mined the value for the specified requestId/_timestamp \\r\",\"params\":{\"_requestId\":\"to look up\\r\",\"_timestamp\":\"is the timestamp to look up miners for\\r\"},\"return\":\"the 5 miners' addresses\\r\"},\"getName()\":{\"details\":\"Get the name of the token\\r return string of the token name\\r\"},\"getNewValueCountbyRequestId(uint256)\":{\"details\":\"Counts the number of values that have been submited for the request \\r if called for the currentRequest being mined it can tell you how many miners have submitted a value for that\\r request so far\\r\",\"params\":{\"_requestId\":\"the requestId to look up\\r\"},\"return\":\"uint count of the number of values received for the requestId\\r\"},\"getRequestIdByQueryHash(bytes32)\":{\"details\":\"Getter function for requestId based on the queryHash\\r\",\"params\":{\"_request\":\"is the hash(of string api and granularity) to check if a request already exists\\r\"},\"return\":\"uint requestId\\r\"},\"getRequestIdByRequestQIndex(uint256)\":{\"details\":\"Getter function for the specified requestQ index\\r\",\"params\":{\"_index\":\"to look up in the requestQ array\\r\"},\"return\":\"uint of reqeuestId\\r\"},\"getRequestIdByTimestamp(uint256)\":{\"details\":\"Getter function for requestId based on timestamp \\r\",\"params\":{\"_timestamp\":\"to check requestId\\r\"},\"return\":\"uint of reqeuestId\\r\"},\"getRequestQ()\":{\"details\":\"Getter function for the requestQ array\\r\",\"return\":\"the requestQ arrray\\r\"},\"getRequestUintVars(uint256,bytes32)\":{\"details\":\"Allowes access to the uint variables saved in the apiUintVars under the requestDetails struct\\r for the requestId specified\\r\",\"params\":{\"_data\":\"the variable to pull from the mapping. _data = keccak256(\\\"variable_name\\\") where variable_name is \\r the variables/strings used to save the data in the mapping. The variables names are  \\r commented out under the apiUintVars under the requestDetails struct\\r\",\"_requestId\":\"to look up\\r\"},\"return\":\"uint value of the apiUintVars specified in _data for the requestId specified\\r\"},\"getRequestVars(uint256)\":{\"details\":\"Gets the API struct variables that are not mappings\\r\",\"params\":{\"_requestId\":\"to look up\\r\"},\"return\":\"string of api to query\\rstring of symbol of api to query\\rbytes32 hash of string\\rbytes32 of the granularity(decimal places) requested\\ruint of index in requestQ array\\ruint of current payout/tip for this requestId\\r\"},\"getStakerInfo(address)\":{\"details\":\"This function allows users to retireve all information about a staker\\r\",\"params\":{\"_staker\":\"address of staker inquiring about\\r\"},\"return\":\"uint current state of staker\\ruint startDate of staking\\r\"},\"getSubmissionsByTimestamp(uint256,uint256)\":{\"details\":\"Gets the 5 miners who mined the value for the specified requestId/_timestamp \\r\",\"params\":{\"_requestId\":\"to look up\\r\",\"_timestamp\":\"is the timestampt to look up miners for\\r\"},\"return\":\"address[5] array of 5 addresses ofminers that mined the requestId\\r\"},\"getSymbol()\":{\"details\":\"Get the symbol of the token\\r return string of the token symbol\\r\"},\"getTimestampbyRequestIDandIndex(uint256,uint256)\":{\"details\":\"Gets the timestamp for the value based on their index\\r\",\"params\":{\"_index\":\"is the value index to look up\\r\",\"_requestID\":\"is the requestId to look up\\r\"},\"return\":\"uint timestamp\\r\"},\"getUintVar(bytes32)\":{\"details\":\"Getter for the variables saved under the TellorStorageStruct uintVars variable\\r\",\"params\":{\"_data\":\"the variable to pull from the mapping. _data = keccak256(\\\"variable_name\\\") where variable_name is \\r the variables/strings used to save the data in the mapping. The variables names are  \\r commented out under the uintVars under the TellorStorageStruct struct\\r This is an example of how data is saved into the mapping within other functions: \\r self.uintVars[keccak256(\\\"stakerCount\\\")]\\r\"},\"return\":\"uint of specified variable  \\r\"},\"getVariablesOnDeck()\":{\"details\":\"Getter function for next requestId on queue/request with highest payout at time the function is called\\r\",\"return\":\"onDeck/info on request with highest payout-- RequestId, Totaltips, and API query string\\r\"},\"isInDispute(uint256,uint256)\":{\"details\":\"Gets the 5 miners who mined the value for the specified requestId/_timestamp \\r\",\"params\":{\"_requestId\":\"to look up\\r\",\"_timestamp\":\"is the timestamp to look up miners for\\r\"},\"return\":\"bool true if requestId/timestamp is under dispute\\r\"},\"retrieveData(uint256,uint256)\":{\"details\":\"Retreive value from oracle based on timestamp\\r\",\"params\":{\"_requestId\":\"being requested\\r\",\"_timestamp\":\"to retreive data/value from\\r\"},\"return\":\"value for timestamp submitted\\r\"},\"totalSupply()\":{\"details\":\"Getter for the total_supply of oracle tokens\\r\",\"return\":\"uint total supply\\r\"}},\"title\":\"Tellor Master\\r\"},\"userdoc\":{\"methods\":{}}},\"settings\":{\"compilationTarget\":{\"/C/company/code/open-oracle/contracts/Tellor/TellorMaster.sol\":\"TellorMaster\"},\"evmVersion\":\"petersburg\",\"libraries\":{},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"/C/company/code/open-oracle/contracts/Tellor/TellorGetters.sol\":{\"keccak256\":\"0x28a89979339d4a64f83a4230626bdb83d740c6cf7159610acf75317dfd765f86\",\"urls\":[\"bzzr://0a1d4cfcfa9867eb670e5ff1ea73e25ee0b3117448ad98f1a355084fb2352103\"]},\"/C/company/code/open-oracle/contracts/Tellor/TellorMaster.sol\":{\"keccak256\":\"0xc83abfb6a62ee22d89b5419dbc144ca9a32a215746a737c28b15f9ad0ae414aa\",\"urls\":[\"bzzr://a39e517329a307cfa857edced9f0d287dcad3e5dc4c4ae0d749261863de91ad9\"]},\"/C/company/code/open-oracle/contracts/Tellor/libraries/SafeMath.sol\":{\"keccak256\":\"0x33d33c4333bbab4be87c97fe92662da443612c964e26c7d851e5288832afea4b\",\"urls\":[\"bzzr://96129153254df8e001dd2ef366b60835b8223195d3dbb67216c4570c47fe7c8d\"]},\"/C/company/code/open-oracle/contracts/Tellor/libraries/TellorDispute.sol\":{\"keccak256\":\"0xea017b20f05242f2acf05b4eabc52e996fffa77cc94f16d6d9ddae0c8ed18916\",\"urls\":[\"bzzr://fca8238d668e63dd5cb95d0199466fbd73b113894bb41817330d5bf82be479e5\"]},\"/C/company/code/open-oracle/contracts/Tellor/libraries/TellorGettersLibrary.sol\":{\"keccak256\":\"0x045a54c60f9b23eed4c9fc32b2d9f3f436348597408ac89d377e673c32227528\",\"urls\":[\"bzzr://9f967b209a90d61b5df82386005dd98a89e28ad5cafa6a1233ab5ebb773c44e5\"]},\"/C/company/code/open-oracle/contracts/Tellor/libraries/TellorStake.sol\":{\"keccak256\":\"0xcf2254187699dc31e79fa45bf752c05e4200f384044dcdf4e1822a294e40ddd0\",\"urls\":[\"bzzr://fa0c791a68578ef8e08e396a4f19524032bf62650025eee2c04fab37e8355908\"]},\"/C/company/code/open-oracle/contracts/Tellor/libraries/TellorStorage.sol\":{\"keccak256\":\"0x3517d1cecb0e449924d673e3fe3bd681bd151973f920d9c716f3baf6499826c7\",\"urls\":[\"bzzr://af89a9f762f67c69fba2cdc517311981663f72e3dd8b597c27aa0d47a4f8560b\"]},\"/C/company/code/open-oracle/contracts/Tellor/libraries/TellorTransfer.sol\":{\"keccak256\":\"0x3e0ac385295d9c9dd8f243a347365749cc7c095e6b491149164ec44df906d654\",\"urls\":[\"bzzr://87f52e6715b7c5668a45c095fe5a57bd9b77546bd3b952ae904fb4b9f0aff144\"]},\"/C/company/code/open-oracle/contracts/Tellor/libraries/Utilities.sol\":{\"keccak256\":\"0x6b555c31c790b578b7d10a26c8061c49f5435997716fad9f0cbe6b4b6c0bce03\",\"urls\":[\"bzzr://0526c21b5ac655d0a2782f81725ff30c60f76e4e83bcc9e5dd357d1b25c4869a\"]}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50604051602080620031e78339810180604052602081101561003157600080fd5b8101908080519060200190929190505050600073__TellorStake___________________________634601f1cd90916040518263ffffffff1660e01b81526004018082815260200191505060006040518083038186803b15801561009457600080fd5b505af41580156100a8573d6000803e3d6000fd5b50505050336000603f01600060405180807f5f6f776e6572000000000000000000000000000000000000000000000000000081525060060190506040518091039020815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550336000603f01600060405180807f5f6465697479000000000000000000000000000000000000000000000000000081525060060190506040518091039020815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550806000603f01600060405180807f74656c6c6f72436f6e7472616374000000000000000000000000000000000000815250600e0190506040518091039020815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055507fc2d1449eb0b6547aa426e09d9942a77fa4fc8cd3296305b3163e22452e0bcb8d81604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390a150612f2980620002be6000396000f3fe6080604052600436106101f95760003560e01c806370a082311161010d578063ae0a8279116100a0578063da3799411161006f578063da37994114610f66578063dd62ed3e14610fb5578063e0ae93c11461103a578063e1eee6d614611093578063fc7cf0a0146111cf576101f9565b8063ae0a827914610d2a578063af0b132714610d7b578063b541302914610eba578063c775b54214610f0d576101f9565b806393fa4915116100dc57806393fa491514610b38578063999cf26c14610b91578063a22e407a14610c04578063a7c438bc14610cb7576101f9565b806370a08231146109b5578063733bdef014610a1a57806377fbb66314610a865780637f6fd5d914610adf576101f9565b80633180f8df116101905780634ee2cd7e1161015f5780634ee2cd7e146107b4578063612c8f7f146108235780636173c0b81461087257806363bb82ad146108c157806369026d6314610934576101f9565b80633180f8df1461065d5780633df0777b146106b757806346eee1c41461071457806347abd7f114610763576101f9565b806317d7de7c116101cc57806317d7de7c146104b557806318160ddd1461054557806319e8e03b146105705780631db842f01461060e576101f9565b80630f0b424d146102da57806311c9851214610329578063133bee5e146103aa5780631507040114610425575b600080603f01600060405180807f74656c6c6f72436f6e7472616374000000000000000000000000000000000000815250600e0190506040518091039020815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905060606000368080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f82011690508083019250505050505050905060008082516020840185600019f43d604051816000823e82600081146102d6578282f35b8282fd5b3480156102e657600080fd5b50610313600480360360208110156102fd57600080fd5b8101908080359060200190929190505050611205565b6040518082815260200191505060405180910390f35b34801561033557600080fd5b5061036c6004803603604081101561034c57600080fd5b810190808035906020019092919080359060200190929190505050611222565b6040518082600560200280838360005b8381101561039757808201518184015260208101905061037c565b5050505090500191505060405180910390f35b3480156103b657600080fd5b506103e3600480360360208110156103cd57600080fd5b8101908080359060200190929190505050611248565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34801561043157600080fd5b5061043a611265565b6040518080602001828103825283818151815260200191508051906020019080838360005b8381101561047a57808201518184015260208101905061045f565b50505050905090810190601f1680156104a75780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b3480156104c157600080fd5b506104ca611276565b6040518080602001828103825283818151815260200191508051906020019080838360005b8381101561050a5780820151818401526020810190506104ef565b50505050905090810190601f1680156105375780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34801561055157600080fd5b5061055a611287565b6040518082815260200191505060405180910390f35b34801561057c57600080fd5b50610585611298565b6040518084815260200183815260200180602001828103825283818151815260200191508051906020019080838360005b838110156105d15780820151818401526020810190506105b6565b50505050905090810190601f1680156105fe5780820380516001836020036101000a031916815260200191505b5094505050505060405180910390f35b34801561061a57600080fd5b506106476004803603602081101561063157600080fd5b81019080803590602001909291905050506112b2565b6040518082815260200191505060405180910390f35b34801561066957600080fd5b506106966004803603602081101561068057600080fd5b81019080803590602001909291905050506112cf565b60405180838152602001821515151581526020019250505060405180910390f35b3480156106c357600080fd5b506106fa600480360360408110156106da57600080fd5b8101908080359060200190929190803590602001909291905050506112ef565b604051808215151515815260200191505060405180910390f35b34801561072057600080fd5b5061074d6004803603602081101561073757600080fd5b810190808035906020019092919050505061130f565b6040518082815260200191505060405180910390f35b34801561076f57600080fd5b506107b26004803603602081101561078657600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919050505061132c565b005b3480156107c057600080fd5b5061080d600480360360408110156107d757600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050611343565b6040518082815260200191505060405180910390f35b34801561082f57600080fd5b5061085c6004803603602081101561084657600080fd5b8101908080359060200190929190505050611415565b6040518082815260200191505060405180910390f35b34801561087e57600080fd5b506108ab6004803603602081101561089557600080fd5b8101908080359060200190929190505050611432565b6040518082815260200191505060405180910390f35b3480156108cd57600080fd5b5061091a600480360360408110156108e457600080fd5b8101908080359060200190929190803573ffffffffffffffffffffffffffffffffffffffff16906020019092919050505061144f565b604051808215151515815260200191505060405180910390f35b34801561094057600080fd5b506109776004803603604081101561095757600080fd5b81019080803590602001909291908035906020019092919050505061146f565b6040518082600560200280838360005b838110156109a2578082015181840152602081019050610987565b5050505090500191505060405180910390f35b3480156109c157600080fd5b50610a04600480360360208110156109d857600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050611495565b6040518082815260200191505060405180910390f35b348015610a2657600080fd5b50610a6960048036036020811015610a3d57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919050505061155e565b604051808381526020018281526020019250505060405180910390f35b348015610a9257600080fd5b50610ac960048036036040811015610aa957600080fd5b81019080803590602001909291908035906020019092919050505061157e565b6040518082815260200191505060405180910390f35b348015610aeb57600080fd5b50610b2260048036036040811015610b0257600080fd5b81019080803590602001909291908035906020019092919050505061159e565b6040518082815260200191505060405180910390f35b348015610b4457600080fd5b50610b7b60048036036040811015610b5b57600080fd5b8101908080359060200190929190803590602001909291905050506115be565b6040518082815260200191505060405180910390f35b348015610b9d57600080fd5b50610bea60048036036040811015610bb457600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803590602001909291905050506115de565b604051808215151515815260200191505060405180910390f35b348015610c1057600080fd5b50610c196116b0565b6040518087815260200186815260200185815260200180602001848152602001838152602001828103825285818151815260200191508051906020019080838360005b83811015610c77578082015181840152602081019050610c5c565b50505050905090810190601f168015610ca45780820380516001836020036101000a031916815260200191505b5097505050505050505060405180910390f35b348015610cc357600080fd5b50610d1060048036036040811015610cda57600080fd5b8101908080359060200190929190803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506116d8565b604051808215151515815260200191505060405180910390f35b348015610d3657600080fd5b50610d7960048036036020811015610d4d57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506116f8565b005b348015610d8757600080fd5b50610db460048036036020811015610d9e57600080fd5b810190808035906020019092919050505061170f565b604051808a81526020018915151515815260200188151515158152602001871515151581526020018673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200183600960200280838360005b83811015610e99578082015181840152602081019050610e7e565b50505050905001828152602001995050505050505050505060405180910390f35b348015610ec657600080fd5b50610ecf611757565b6040518082603360200280838360005b83811015610efa578082015181840152602081019050610edf565b5050505090500191505060405180910390f35b348015610f1957600080fd5b50610f5060048036036040811015610f3057600080fd5b81019080803590602001909291908035906020019092919050505061176e565b6040518082815260200191505060405180910390f35b348015610f7257600080fd5b50610f9f60048036036020811015610f8957600080fd5b810190808035906020019092919050505061178e565b6040518082815260200191505060405180910390f35b348015610fc157600080fd5b5061102460048036036040811015610fd857600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506117ab565b6040518082815260200191505060405180910390f35b34801561104657600080fd5b5061107d6004803603604081101561105d57600080fd5b8101908080359060200190929190803590602001909291905050506118a9565b6040518082815260200191505060405180910390f35b34801561109f57600080fd5b506110cc600480360360208110156110b657600080fd5b81019080803590602001909291905050506118c9565b604051808060200180602001878152602001868152602001858152602001848152602001838103835289818151815260200191508051906020019080838360005b8381101561112857808201518184015260208101905061110d565b50505050905090810190601f1680156111555780820380516001836020036101000a031916815260200191505b50838103825288818151815260200191508051906020019080838360005b8381101561118e578082015181840152602081019050611173565b50505050905090810190601f1680156111bb5780820380516001836020036101000a031916815260200191505b509850505050505050505060405180910390f35b3480156111db57600080fd5b506111e46118fb565b60405180838152602001821515151581526020019250505060405180910390f35b600061121b82600061191090919063ffffffff16565b9050919050565b61122a612e73565b611240838360006119309092919063ffffffff16565b905092915050565b600061125e8260006119a690919063ffffffff16565b9050919050565b606061127160006119e6565b905090565b60606112826000611a25565b905090565b60006112936000611a64565b905090565b60008060606112a76000611ab8565b925092509250909192565b60006112c8826000611bec90919063ffffffff16565b9050919050565b6000806112e6836000611c0c90919063ffffffff16565b91509150915091565b600061130783836000611c859092919063ffffffff16565b905092915050565b6000611325826000611cc790919063ffffffff16565b9050919050565b611340816000611ced90919063ffffffff16565b50565b60008073__TellorTransfer________________________633f48b1ff909185856040518463ffffffff1660e01b8152600401808481526020018373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001828152602001935050505060206040518083038186803b1580156113d257600080fd5b505af41580156113e6573d6000803e3d6000fd5b505050506040513d60208110156113fc57600080fd5b8101908080519060200190929190505050905092915050565b600061142b826000611e1c90919063ffffffff16565b9050919050565b6000611448826000611e3c90919063ffffffff16565b9050919050565b600061146783836000611e6a9092919063ffffffff16565b905092915050565b611477612e95565b61148d83836000611ed59092919063ffffffff16565b905092915050565b60008073__TellorTransfer________________________6393b182b39091846040518363ffffffff1660e01b8152600401808381526020018273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019250505060206040518083038186803b15801561151c57600080fd5b505af4158015611530573d6000803e3d6000fd5b505050506040513d602081101561154657600080fd5b81019080805190602001909291905050509050919050565b600080611575836000611f8190919063ffffffff16565b91509150915091565b6000611596838360006120199092919063ffffffff16565b905092915050565b60006115b6838360006120529092919063ffffffff16565b905092915050565b60006115d6838360006120879092919063ffffffff16565b905092915050565b60008073__TellorTransfer________________________63acaab9e2909185856040518463ffffffff1660e01b8152600401808481526020018373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001828152602001935050505060206040518083038186803b15801561166d57600080fd5b505af4158015611681573d6000803e3d6000fd5b505050506040513d602081101561169757600080fd5b8101908080519060200190929190505050905092915050565b600080600060606000806116c460006120bc565b955095509550955095509550909192939495565b60006116f0838360006123c69092919063ffffffff16565b905092915050565b61170c81600061243490919063ffffffff16565b50565b6000806000806000806000611722612eb7565b60006117388a60006125c690919063ffffffff16565b9850985098509850985098509850985098509193959799909294969850565b61175f612eda565b611769600061299c565b905090565b6000611786838360006129eb9092919063ffffffff16565b905092915050565b60006117a4826000612a2090919063ffffffff16565b9050919050565b60008073__TellorTransfer________________________63bf32006c909185856040518463ffffffff1660e01b8152600401808481526020018373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001935050505060206040518083038186803b15801561186657600080fd5b505af415801561187a573d6000803e3d6000fd5b505050506040513d602081101561189057600080fd5b8101908080519060200190929190505050905092915050565b60006118c183836000612a409092919063ffffffff16565b905092915050565b6060806000806000806118e6876000612a7590919063ffffffff16565b95509550955095509550955091939550919395565b6000806119086000612cd4565b915091509091565b600082604201600083815260200190815260200160002054905092915050565b611938612e73565b8360480160008481526020019081526020016000206009016000838152602001908152602001600020600580602002604051908101604052809291908260058015611998576020028201915b815481526020019060010190808311611984575b505050505090509392505050565b600082603f01600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905092915050565b60606040518060400160405280600281526020017f54540000000000000000000000000000000000000000000000000000000000008152509050919050565b60606040518060400160405280600f81526020017f54656c6c6f7220547269627574657300000000000000000000000000000000008152509050919050565b600081604001600060405180807f746f74616c5f737570706c790000000000000000000000000000000000000000815250600c01905060405180910390208152602001908152602001600020549050919050565b60008060606000611ac885612d96565b905080856048016000838152602001908152602001600020600401600060405180807f746f74616c54697000000000000000000000000000000000000000000000000081525060080190506040518091039020815260200190815260200160002054866048016000848152602001908152602001600020600001808054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015611bd75780601f10611bac57610100808354040283529160200191611bd7565b820191906000526020600020905b815481529060010190602001808311611bba57829003601f168201915b50505050509050935093509350509193909250565b600082604901600083815260200190815260200160002054905092915050565b60008060008460480160008581526020019081526020016000209050600081600301805490501115611c7257611c66858583600301600185600301805490500381548110611c5657fe5b9060005260206000200154612087565b60019250925050611c7e565b60008081915092509250505b9250929050565b6000836048016000848152602001908152602001600020600701600083815260200190815260200160002060009054906101000a900460ff1690509392505050565b600082604801600083815260200190815260200160002060030180549050905092915050565b3373ffffffffffffffffffffffffffffffffffffffff1682603f01600060405180807f5f6465697479000000000000000000000000000000000000000000000000000081525060060190506040518091039020815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614611d8f57600080fd5b8082603f01600060405180807f5f6465697479000000000000000000000000000000000000000000000000000081525060060190506040518091039020815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505050565b600082604001600083815260200190815260200160002054905092915050565b60006032821115611e4c57600080fd5b82604301600083815260200190815260200160002054905092915050565b600083604101600084815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff1690509392505050565b611edd612e95565b8360480160008481526020019081526020016000206008016000838152602001908152602001600020600580602002604051908101604052809291908260058015611f73576020028201915b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019060010190808311611f29575b505050505090509392505050565b6000808360470160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600001548460470160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060010154915091509250929050565b6000836048016000848152602001908152602001600020600301828154811061203e57fe5b906000526020600020015490509392505050565b600083604401600084815260200190815260200160002060050160008381526020019081526020016000205490509392505050565b600083604801600084815260200190815260200160002060060160008381526020019081526020016000205490509392505050565b60008060006060600080866000015487604001600060405180807f63757272656e74526571756573744964000000000000000000000000000000008152506010019050604051809103902081526020019081526020016000205488604001600060405180807f646966666963756c747900000000000000000000000000000000000000000000815250600a01905060405180910390208152602001908152602001600020548960480160008b604001600060405180807f63757272656e74526571756573744964000000000000000000000000000000008152506010019050604051809103902081526020019081526020016000205481526020019081526020016000206000018a60480160008c604001600060405180807f63757272656e7452657175657374496400000000000000000000000000000000815250601001905060405180910390208152602001908152602001600020548152602001908152602001600020600401600060405180807f6772616e756c6172697479000000000000000000000000000000000000000000815250600b01905060405180910390208152602001908152602001600020548b60480160008d604001600060405180807f63757272656e7452657175657374496400000000000000000000000000000000815250601001905060405180910390208152602001908152602001600020548152602001908152602001600020600401600060405180807f746f74616c54697000000000000000000000000000000000000000000000000081525060080190506040518091039020815260200190815260200160002054828054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156123aa5780601f1061237f576101008083540402835291602001916123aa565b820191906000526020600020905b81548152906001019060200180831161238d57829003601f168201915b5050505050925095509550955095509550955091939550919395565b600083604401600084815260200190815260200160002060060160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff1690509392505050565b3373ffffffffffffffffffffffffffffffffffffffff1682603f01600060405180807f5f6465697479000000000000000000000000000000000000000000000000000081525060060190506040518091039020815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16146124d657600080fd5b8082603f01600060405180807f74656c6c6f72436f6e7472616374000000000000000000000000000000000000815250600e0190506040518091039020815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055507fc2d1449eb0b6547aa426e09d9942a77fa4fc8cd3296305b3163e22452e0bcb8d81604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390a15050565b60008060008060008060006125d9612eb7565b6000808b60440160008c8152602001908152602001600020905080600001548160020160009054906101000a900460ff168260020160019054906101000a900460ff168360020160029054906101000a900460ff168460020160039054906101000a900473ffffffffffffffffffffffffffffffffffffffff168560030160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff168660040160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1660405180610120016040528089600501600060405180807f726571756573744964000000000000000000000000000000000000000000000081525060090190506040518091039020815260200190815260200160002054815260200189600501600060405180807f74696d657374616d70000000000000000000000000000000000000000000000081525060090190506040518091039020815260200190815260200160002054815260200189600501600060405180807f76616c756500000000000000000000000000000000000000000000000000000081525060050190506040518091039020815260200190815260200160002054815260200189600501600060405180807f6d696e457865637574696f6e446174650000000000000000000000000000000081525060100190506040518091039020815260200190815260200160002054815260200189600501600060405180807f6e756d6265724f66566f74657300000000000000000000000000000000000000815250600d0190506040518091039020815260200190815260200160002054815260200189600501600060405180807f626c6f636b4e756d626572000000000000000000000000000000000000000000815250600b0190506040518091039020815260200190815260200160002054815260200189600501600060405180807f6d696e6572536c6f74000000000000000000000000000000000000000000000081525060090190506040518091039020815260200190815260200160002054815260200189600501600060405180807f71756f72756d000000000000000000000000000000000000000000000000000081525060060190506040518091039020815260200190815260200160002054815260200189600501600060405180807f6665650000000000000000000000000000000000000000000000000000000000815250600301905060405180910390208152602001908152602001600020548152508860010154995099509950995099509950995099509950509295985092959850929598565b6129a4612eda565b816001016033806020026040519081016040528092919082603380156129df576020028201915b8154815260200190600101908083116129cb575b50505050509050919050565b600083604801600084815260200190815260200160002060050160008381526020019081526020016000205490509392505050565b600082604a01600083815260200190815260200160002054905092915050565b600083604801600084815260200190815260200160002060040160008381526020019081526020016000205490509392505050565b606080600080600080600088604801600089815260200190815260200160002090508060000181600101826002015483600401600060405180807f6772616e756c6172697479000000000000000000000000000000000000000000815250600b019050604051809103902081526020019081526020016000205484600401600060405180807f7265717565737451506f736974696f6e000000000000000000000000000000008152506010019050604051809103902081526020019081526020016000205485600401600060405180807f746f74616c54697000000000000000000000000000000000000000000000000081525060080190506040518091039020815260200190815260200160002054858054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015612c1a5780601f10612bef57610100808354040283529160200191612c1a565b820191906000526020600020905b815481529060010190602001808311612bfd57829003601f168201915b50505050509550848054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015612cb65780601f10612c8b57610100808354040283529160200191612cb6565b820191906000526020600020905b815481529060010190602001808311612c9957829003601f168201915b50505050509450965096509650965096509650509295509295509295565b600080612d8b8384604201600086604001600060405180807f74696d654f664c6173744e657756616c756500000000000000000000000000008152506012019050604051809103902081526020019081526020016000205481526020019081526020016000205485604001600060405180807f74696d654f664c6173744e657756616c7565000000000000000000000000000081525060120190506040518091039020815260200190815260200160002054612087565b600191509150915091565b6000806000612de384600101603380602002604051908101604052809291908260338015612dd9576020028201915b815481526020019060010190808311612dc5575b5050505050612e0a565b80925081935050508360430160008281526020019081526020016000205492505050919050565b60008082600160338110612e1a57fe5b602002015191506000600190505b6033811015612e6d5782848260338110612e3e57fe5b60200201511115612e6057838160338110612e5557fe5b602002015192508091505b8080600101915050612e28565b50915091565b6040518060a00160405280600590602082028038833980820191505090505090565b6040518060a00160405280600590602082028038833980820191505090505090565b604051806101200160405280600990602082028038833980820191505090505090565b60405180610660016040528060339060208202803883398082019150509050509056fea165627a7a7230582044abd6d04a4c170db9b8b108d4e1de85ec327ec6eb5a01e94f2f8957de6553c30029",
  "deployedBytecode": "0x6080604052600436106101f95760003560e01c806370a082311161010d578063ae0a8279116100a0578063da3799411161006f578063da37994114610f66578063dd62ed3e14610fb5578063e0ae93c11461103a578063e1eee6d614611093578063fc7cf0a0146111cf576101f9565b8063ae0a827914610d2a578063af0b132714610d7b578063b541302914610eba578063c775b54214610f0d576101f9565b806393fa4915116100dc57806393fa491514610b38578063999cf26c14610b91578063a22e407a14610c04578063a7c438bc14610cb7576101f9565b806370a08231146109b5578063733bdef014610a1a57806377fbb66314610a865780637f6fd5d914610adf576101f9565b80633180f8df116101905780634ee2cd7e1161015f5780634ee2cd7e146107b4578063612c8f7f146108235780636173c0b81461087257806363bb82ad146108c157806369026d6314610934576101f9565b80633180f8df1461065d5780633df0777b146106b757806346eee1c41461071457806347abd7f114610763576101f9565b806317d7de7c116101cc57806317d7de7c146104b557806318160ddd1461054557806319e8e03b146105705780631db842f01461060e576101f9565b80630f0b424d146102da57806311c9851214610329578063133bee5e146103aa5780631507040114610425575b600080603f01600060405180807f74656c6c6f72436f6e7472616374000000000000000000000000000000000000815250600e0190506040518091039020815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905060606000368080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f82011690508083019250505050505050905060008082516020840185600019f43d604051816000823e82600081146102d6578282f35b8282fd5b3480156102e657600080fd5b50610313600480360360208110156102fd57600080fd5b8101908080359060200190929190505050611205565b6040518082815260200191505060405180910390f35b34801561033557600080fd5b5061036c6004803603604081101561034c57600080fd5b810190808035906020019092919080359060200190929190505050611222565b6040518082600560200280838360005b8381101561039757808201518184015260208101905061037c565b5050505090500191505060405180910390f35b3480156103b657600080fd5b506103e3600480360360208110156103cd57600080fd5b8101908080359060200190929190505050611248565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34801561043157600080fd5b5061043a611265565b6040518080602001828103825283818151815260200191508051906020019080838360005b8381101561047a57808201518184015260208101905061045f565b50505050905090810190601f1680156104a75780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b3480156104c157600080fd5b506104ca611276565b6040518080602001828103825283818151815260200191508051906020019080838360005b8381101561050a5780820151818401526020810190506104ef565b50505050905090810190601f1680156105375780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34801561055157600080fd5b5061055a611287565b6040518082815260200191505060405180910390f35b34801561057c57600080fd5b50610585611298565b6040518084815260200183815260200180602001828103825283818151815260200191508051906020019080838360005b838110156105d15780820151818401526020810190506105b6565b50505050905090810190601f1680156105fe5780820380516001836020036101000a031916815260200191505b5094505050505060405180910390f35b34801561061a57600080fd5b506106476004803603602081101561063157600080fd5b81019080803590602001909291905050506112b2565b6040518082815260200191505060405180910390f35b34801561066957600080fd5b506106966004803603602081101561068057600080fd5b81019080803590602001909291905050506112cf565b60405180838152602001821515151581526020019250505060405180910390f35b3480156106c357600080fd5b506106fa600480360360408110156106da57600080fd5b8101908080359060200190929190803590602001909291905050506112ef565b604051808215151515815260200191505060405180910390f35b34801561072057600080fd5b5061074d6004803603602081101561073757600080fd5b810190808035906020019092919050505061130f565b6040518082815260200191505060405180910390f35b34801561076f57600080fd5b506107b26004803603602081101561078657600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919050505061132c565b005b3480156107c057600080fd5b5061080d600480360360408110156107d757600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050611343565b6040518082815260200191505060405180910390f35b34801561082f57600080fd5b5061085c6004803603602081101561084657600080fd5b8101908080359060200190929190505050611415565b6040518082815260200191505060405180910390f35b34801561087e57600080fd5b506108ab6004803603602081101561089557600080fd5b8101908080359060200190929190505050611432565b6040518082815260200191505060405180910390f35b3480156108cd57600080fd5b5061091a600480360360408110156108e457600080fd5b8101908080359060200190929190803573ffffffffffffffffffffffffffffffffffffffff16906020019092919050505061144f565b604051808215151515815260200191505060405180910390f35b34801561094057600080fd5b506109776004803603604081101561095757600080fd5b81019080803590602001909291908035906020019092919050505061146f565b6040518082600560200280838360005b838110156109a2578082015181840152602081019050610987565b5050505090500191505060405180910390f35b3480156109c157600080fd5b50610a04600480360360208110156109d857600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050611495565b6040518082815260200191505060405180910390f35b348015610a2657600080fd5b50610a6960048036036020811015610a3d57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919050505061155e565b604051808381526020018281526020019250505060405180910390f35b348015610a9257600080fd5b50610ac960048036036040811015610aa957600080fd5b81019080803590602001909291908035906020019092919050505061157e565b6040518082815260200191505060405180910390f35b348015610aeb57600080fd5b50610b2260048036036040811015610b0257600080fd5b81019080803590602001909291908035906020019092919050505061159e565b6040518082815260200191505060405180910390f35b348015610b4457600080fd5b50610b7b60048036036040811015610b5b57600080fd5b8101908080359060200190929190803590602001909291905050506115be565b6040518082815260200191505060405180910390f35b348015610b9d57600080fd5b50610bea60048036036040811015610bb457600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803590602001909291905050506115de565b604051808215151515815260200191505060405180910390f35b348015610c1057600080fd5b50610c196116b0565b6040518087815260200186815260200185815260200180602001848152602001838152602001828103825285818151815260200191508051906020019080838360005b83811015610c77578082015181840152602081019050610c5c565b50505050905090810190601f168015610ca45780820380516001836020036101000a031916815260200191505b5097505050505050505060405180910390f35b348015610cc357600080fd5b50610d1060048036036040811015610cda57600080fd5b8101908080359060200190929190803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506116d8565b604051808215151515815260200191505060405180910390f35b348015610d3657600080fd5b50610d7960048036036020811015610d4d57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506116f8565b005b348015610d8757600080fd5b50610db460048036036020811015610d9e57600080fd5b810190808035906020019092919050505061170f565b604051808a81526020018915151515815260200188151515158152602001871515151581526020018673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200183600960200280838360005b83811015610e99578082015181840152602081019050610e7e565b50505050905001828152602001995050505050505050505060405180910390f35b348015610ec657600080fd5b50610ecf611757565b6040518082603360200280838360005b83811015610efa578082015181840152602081019050610edf565b5050505090500191505060405180910390f35b348015610f1957600080fd5b50610f5060048036036040811015610f3057600080fd5b81019080803590602001909291908035906020019092919050505061176e565b6040518082815260200191505060405180910390f35b348015610f7257600080fd5b50610f9f60048036036020811015610f8957600080fd5b810190808035906020019092919050505061178e565b6040518082815260200191505060405180910390f35b348015610fc157600080fd5b5061102460048036036040811015610fd857600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506117ab565b6040518082815260200191505060405180910390f35b34801561104657600080fd5b5061107d6004803603604081101561105d57600080fd5b8101908080359060200190929190803590602001909291905050506118a9565b6040518082815260200191505060405180910390f35b34801561109f57600080fd5b506110cc600480360360208110156110b657600080fd5b81019080803590602001909291905050506118c9565b604051808060200180602001878152602001868152602001858152602001848152602001838103835289818151815260200191508051906020019080838360005b8381101561112857808201518184015260208101905061110d565b50505050905090810190601f1680156111555780820380516001836020036101000a031916815260200191505b50838103825288818151815260200191508051906020019080838360005b8381101561118e578082015181840152602081019050611173565b50505050905090810190601f1680156111bb5780820380516001836020036101000a031916815260200191505b509850505050505050505060405180910390f35b3480156111db57600080fd5b506111e46118fb565b60405180838152602001821515151581526020019250505060405180910390f35b600061121b82600061191090919063ffffffff16565b9050919050565b61122a612e73565b611240838360006119309092919063ffffffff16565b905092915050565b600061125e8260006119a690919063ffffffff16565b9050919050565b606061127160006119e6565b905090565b60606112826000611a25565b905090565b60006112936000611a64565b905090565b60008060606112a76000611ab8565b925092509250909192565b60006112c8826000611bec90919063ffffffff16565b9050919050565b6000806112e6836000611c0c90919063ffffffff16565b91509150915091565b600061130783836000611c859092919063ffffffff16565b905092915050565b6000611325826000611cc790919063ffffffff16565b9050919050565b611340816000611ced90919063ffffffff16565b50565b60008073__TellorTransfer________________________633f48b1ff909185856040518463ffffffff1660e01b8152600401808481526020018373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001828152602001935050505060206040518083038186803b1580156113d257600080fd5b505af41580156113e6573d6000803e3d6000fd5b505050506040513d60208110156113fc57600080fd5b8101908080519060200190929190505050905092915050565b600061142b826000611e1c90919063ffffffff16565b9050919050565b6000611448826000611e3c90919063ffffffff16565b9050919050565b600061146783836000611e6a9092919063ffffffff16565b905092915050565b611477612e95565b61148d83836000611ed59092919063ffffffff16565b905092915050565b60008073__TellorTransfer________________________6393b182b39091846040518363ffffffff1660e01b8152600401808381526020018273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019250505060206040518083038186803b15801561151c57600080fd5b505af4158015611530573d6000803e3d6000fd5b505050506040513d602081101561154657600080fd5b81019080805190602001909291905050509050919050565b600080611575836000611f8190919063ffffffff16565b91509150915091565b6000611596838360006120199092919063ffffffff16565b905092915050565b60006115b6838360006120529092919063ffffffff16565b905092915050565b60006115d6838360006120879092919063ffffffff16565b905092915050565b60008073__TellorTransfer________________________63acaab9e2909185856040518463ffffffff1660e01b8152600401808481526020018373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001828152602001935050505060206040518083038186803b15801561166d57600080fd5b505af4158015611681573d6000803e3d6000fd5b505050506040513d602081101561169757600080fd5b8101908080519060200190929190505050905092915050565b600080600060606000806116c460006120bc565b955095509550955095509550909192939495565b60006116f0838360006123c69092919063ffffffff16565b905092915050565b61170c81600061243490919063ffffffff16565b50565b6000806000806000806000611722612eb7565b60006117388a60006125c690919063ffffffff16565b9850985098509850985098509850985098509193959799909294969850565b61175f612eda565b611769600061299c565b905090565b6000611786838360006129eb9092919063ffffffff16565b905092915050565b60006117a4826000612a2090919063ffffffff16565b9050919050565b60008073__TellorTransfer________________________63bf32006c909185856040518463ffffffff1660e01b8152600401808481526020018373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001935050505060206040518083038186803b15801561186657600080fd5b505af415801561187a573d6000803e3d6000fd5b505050506040513d602081101561189057600080fd5b8101908080519060200190929190505050905092915050565b60006118c183836000612a409092919063ffffffff16565b905092915050565b6060806000806000806118e6876000612a7590919063ffffffff16565b95509550955095509550955091939550919395565b6000806119086000612cd4565b915091509091565b600082604201600083815260200190815260200160002054905092915050565b611938612e73565b8360480160008481526020019081526020016000206009016000838152602001908152602001600020600580602002604051908101604052809291908260058015611998576020028201915b815481526020019060010190808311611984575b505050505090509392505050565b600082603f01600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905092915050565b60606040518060400160405280600281526020017f54540000000000000000000000000000000000000000000000000000000000008152509050919050565b60606040518060400160405280600f81526020017f54656c6c6f7220547269627574657300000000000000000000000000000000008152509050919050565b600081604001600060405180807f746f74616c5f737570706c790000000000000000000000000000000000000000815250600c01905060405180910390208152602001908152602001600020549050919050565b60008060606000611ac885612d96565b905080856048016000838152602001908152602001600020600401600060405180807f746f74616c54697000000000000000000000000000000000000000000000000081525060080190506040518091039020815260200190815260200160002054866048016000848152602001908152602001600020600001808054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015611bd75780601f10611bac57610100808354040283529160200191611bd7565b820191906000526020600020905b815481529060010190602001808311611bba57829003601f168201915b50505050509050935093509350509193909250565b600082604901600083815260200190815260200160002054905092915050565b60008060008460480160008581526020019081526020016000209050600081600301805490501115611c7257611c66858583600301600185600301805490500381548110611c5657fe5b9060005260206000200154612087565b60019250925050611c7e565b60008081915092509250505b9250929050565b6000836048016000848152602001908152602001600020600701600083815260200190815260200160002060009054906101000a900460ff1690509392505050565b600082604801600083815260200190815260200160002060030180549050905092915050565b3373ffffffffffffffffffffffffffffffffffffffff1682603f01600060405180807f5f6465697479000000000000000000000000000000000000000000000000000081525060060190506040518091039020815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614611d8f57600080fd5b8082603f01600060405180807f5f6465697479000000000000000000000000000000000000000000000000000081525060060190506040518091039020815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505050565b600082604001600083815260200190815260200160002054905092915050565b60006032821115611e4c57600080fd5b82604301600083815260200190815260200160002054905092915050565b600083604101600084815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff1690509392505050565b611edd612e95565b8360480160008481526020019081526020016000206008016000838152602001908152602001600020600580602002604051908101604052809291908260058015611f73576020028201915b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019060010190808311611f29575b505050505090509392505050565b6000808360470160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600001548460470160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060010154915091509250929050565b6000836048016000848152602001908152602001600020600301828154811061203e57fe5b906000526020600020015490509392505050565b600083604401600084815260200190815260200160002060050160008381526020019081526020016000205490509392505050565b600083604801600084815260200190815260200160002060060160008381526020019081526020016000205490509392505050565b60008060006060600080866000015487604001600060405180807f63757272656e74526571756573744964000000000000000000000000000000008152506010019050604051809103902081526020019081526020016000205488604001600060405180807f646966666963756c747900000000000000000000000000000000000000000000815250600a01905060405180910390208152602001908152602001600020548960480160008b604001600060405180807f63757272656e74526571756573744964000000000000000000000000000000008152506010019050604051809103902081526020019081526020016000205481526020019081526020016000206000018a60480160008c604001600060405180807f63757272656e7452657175657374496400000000000000000000000000000000815250601001905060405180910390208152602001908152602001600020548152602001908152602001600020600401600060405180807f6772616e756c6172697479000000000000000000000000000000000000000000815250600b01905060405180910390208152602001908152602001600020548b60480160008d604001600060405180807f63757272656e7452657175657374496400000000000000000000000000000000815250601001905060405180910390208152602001908152602001600020548152602001908152602001600020600401600060405180807f746f74616c54697000000000000000000000000000000000000000000000000081525060080190506040518091039020815260200190815260200160002054828054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156123aa5780601f1061237f576101008083540402835291602001916123aa565b820191906000526020600020905b81548152906001019060200180831161238d57829003601f168201915b5050505050925095509550955095509550955091939550919395565b600083604401600084815260200190815260200160002060060160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff1690509392505050565b3373ffffffffffffffffffffffffffffffffffffffff1682603f01600060405180807f5f6465697479000000000000000000000000000000000000000000000000000081525060060190506040518091039020815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16146124d657600080fd5b8082603f01600060405180807f74656c6c6f72436f6e7472616374000000000000000000000000000000000000815250600e0190506040518091039020815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055507fc2d1449eb0b6547aa426e09d9942a77fa4fc8cd3296305b3163e22452e0bcb8d81604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390a15050565b60008060008060008060006125d9612eb7565b6000808b60440160008c8152602001908152602001600020905080600001548160020160009054906101000a900460ff168260020160019054906101000a900460ff168360020160029054906101000a900460ff168460020160039054906101000a900473ffffffffffffffffffffffffffffffffffffffff168560030160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff168660040160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1660405180610120016040528089600501600060405180807f726571756573744964000000000000000000000000000000000000000000000081525060090190506040518091039020815260200190815260200160002054815260200189600501600060405180807f74696d657374616d70000000000000000000000000000000000000000000000081525060090190506040518091039020815260200190815260200160002054815260200189600501600060405180807f76616c756500000000000000000000000000000000000000000000000000000081525060050190506040518091039020815260200190815260200160002054815260200189600501600060405180807f6d696e457865637574696f6e446174650000000000000000000000000000000081525060100190506040518091039020815260200190815260200160002054815260200189600501600060405180807f6e756d6265724f66566f74657300000000000000000000000000000000000000815250600d0190506040518091039020815260200190815260200160002054815260200189600501600060405180807f626c6f636b4e756d626572000000000000000000000000000000000000000000815250600b0190506040518091039020815260200190815260200160002054815260200189600501600060405180807f6d696e6572536c6f74000000000000000000000000000000000000000000000081525060090190506040518091039020815260200190815260200160002054815260200189600501600060405180807f71756f72756d000000000000000000000000000000000000000000000000000081525060060190506040518091039020815260200190815260200160002054815260200189600501600060405180807f6665650000000000000000000000000000000000000000000000000000000000815250600301905060405180910390208152602001908152602001600020548152508860010154995099509950995099509950995099509950509295985092959850929598565b6129a4612eda565b816001016033806020026040519081016040528092919082603380156129df576020028201915b8154815260200190600101908083116129cb575b50505050509050919050565b600083604801600084815260200190815260200160002060050160008381526020019081526020016000205490509392505050565b600082604a01600083815260200190815260200160002054905092915050565b600083604801600084815260200190815260200160002060040160008381526020019081526020016000205490509392505050565b606080600080600080600088604801600089815260200190815260200160002090508060000181600101826002015483600401600060405180807f6772616e756c6172697479000000000000000000000000000000000000000000815250600b019050604051809103902081526020019081526020016000205484600401600060405180807f7265717565737451506f736974696f6e000000000000000000000000000000008152506010019050604051809103902081526020019081526020016000205485600401600060405180807f746f74616c54697000000000000000000000000000000000000000000000000081525060080190506040518091039020815260200190815260200160002054858054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015612c1a5780601f10612bef57610100808354040283529160200191612c1a565b820191906000526020600020905b815481529060010190602001808311612bfd57829003601f168201915b50505050509550848054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015612cb65780601f10612c8b57610100808354040283529160200191612cb6565b820191906000526020600020905b815481529060010190602001808311612c9957829003601f168201915b50505050509450965096509650965096509650509295509295509295565b600080612d8b8384604201600086604001600060405180807f74696d654f664c6173744e657756616c756500000000000000000000000000008152506012019050604051809103902081526020019081526020016000205481526020019081526020016000205485604001600060405180807f74696d654f664c6173744e657756616c7565000000000000000000000000000081525060120190506040518091039020815260200190815260200160002054612087565b600191509150915091565b6000806000612de384600101603380602002604051908101604052809291908260338015612dd9576020028201915b815481526020019060010190808311612dc5575b5050505050612e0a565b80925081935050508360430160008281526020019081526020016000205492505050919050565b60008082600160338110612e1a57fe5b602002015191506000600190505b6033811015612e6d5782848260338110612e3e57fe5b60200201511115612e6057838160338110612e5557fe5b602002015192508091505b8080600101915050612e28565b50915091565b6040518060a00160405280600590602082028038833980820191505090505090565b6040518060a00160405280600590602082028038833980820191505090505090565b604051806101200160405280600990602082028038833980820191505090505090565b60405180610660016040528060339060208202803883398082019150509050509056fea165627a7a7230582044abd6d04a4c170db9b8b108d4e1de85ec327ec6eb5a01e94f2f8957de6553c30029",
  "sourceMap": "336:2182:7:-;;;732:327;8:9:-1;5:2;;;30:1;27;20:12;5:2;732:327:7;;;;;;;;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;732:327:7;;;;;;;;;;;;;;;;788:6;:11;;;;:13;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;788:13:7;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;788:13:7;;;;854:10;812:6;:18;;:39;831:19;;;;;;;;;;;;;;;;;;;812:39;;;;;;;;;;;;:52;;;;;;;;;;;;;;;;;;917:10;875:6;:18;;:39;894:19;;;;;;;;;;;;;;;;;;;875:39;;;;;;;;;;;;:52;;;;;;;;;;;;;;;;;;987:15;938:6;:18;;:47;957:27;;;;;;;;;;;;;;;;;;;938:47;;;;;;;;;;;;:64;;;;;;;;;;;;;;;;;;1018:33;1035:15;1018:33;;;;;;;;;;;;;;;;;;;;;;732:327;336:2182;;;;;;",
  "deployedSourceMap": "336:2182:7:-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1878:12;1893:6;:18;;:47;1912:27;;;;;;;;;;;;;;;;;;;1893:47;;;;;;;;;;;;;;;;;;;;;1878:62;;1951:22;1976:8;;1951:33;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;30:3:-1;22:6;14;1:33;99:1;93:3;85:6;81:16;74:27;137:4;133:9;126:4;121:3;117:14;113:30;106:37;;169:3;161:6;157:16;147:26;;1951:33:7;;;;;;;;2103:1;2100;2088:9;2082:16;2075:4;2064:9;2060:20;2054:4;2050:1;2046:6;2033:72;2131:14;2176:4;2170:11;2218:4;2215:1;2210:3;2195:28;2419:6;2431:1;2426:28;;;;2490:4;2485:3;2478:17;2426:28;2447:4;2442:3;2435:17;8780:149:6;;8:9:-1;5:2;;;30:1;27;20:12;5:2;8780:149:6;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;8780:149:6;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;11541:187;;8:9:-1;5:2;;;30:1;27;20:12;5:2;11541:187:6;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;11541:187:6;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;23:1:-1;8:100;33:3;30:1;27:10;8:100;;;99:1;94:3;90:11;84:18;80:1;75:3;71:11;64:39;52:2;49:1;45:10;40:15;;8:100;;;12:14;11541:187:6;;;;;;;;;;;;;;;;3405:123;;8:9:-1;5:2;;;30:1;27;20:12;5:2;3405:123:6;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;3405:123:6;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;11834:101;;8:9:-1;5:2;;;30:1;27;20:12;5:2;11834:101:6;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;23:1:-1;8:100;33:3;30:1;27:10;8:100;;;99:1;94:3;90:11;84:18;80:1;75:3;71:11;64:39;52:2;49:1;45:10;40:15;;8:100;;;12:14;11834:101:6;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;7669:97;;8:9:-1;5:2;;;30:1;27;20:12;5:2;7669:97:6;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;23:1:-1;8:100;33:3;30:1;27:10;8:100;;;99:1;94:3;90:11;84:18;80:1;75:3;71:11;64:39;52:2;49:1;45:10;40:15;;8:100;;;12:14;7669:97:6;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;14351;;8:9:-1;5:2;;;30:1;27;20:12;5:2;14351:97:6;;;:::i;:::-;;;;;;;;;;;;;;;;;;;13284:134;;8:9:-1;5:2;;;30:1;27;20:12;5:2;13284:134:6;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;23:1:-1;8:100;33:3;30:1;27:10;8:100;;;99:1;94:3;90:11;84:18;80:1;75:3;71:11;64:39;52:2;49:1;45:10;40:15;;8:100;;;12:14;13284:134:6;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;9152:148;;8:9:-1;5:2;;;30:1;27;20:12;5:2;9152:148:6;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;9152:148:6;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;6551:142;;8:9:-1;5:2;;;30:1;27;20:12;5:2;6551:142:6;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;6551:142:6;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;13704:149;;8:9:-1;5:2;;;30:1;27;20:12;5:2;13704:149:6;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;13704:149:6;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;8139:153;;8:9:-1;5:2;;;30:1;27;20:12;5:2;8139:153:6;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;8139:153:6;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;1276:96:7;;8:9:-1;5:2;;;30:1;27;20:12;5:2;1276:96:7;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;1276:96:7;;;;;;;;;;;;;;;;;;;:::i;:::-;;2100:148:6;;8:9:-1;5:2;;;30:1;27;20:12;5:2;2100:148:6;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;2100:148:6;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;12929:110;;8:9:-1;5:2;;;30:1;27;20:12;5:2;12929:110:6;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;12929:110:6;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;8468:145;;8:9:-1;5:2;;;30:1;27;20:12;5:2;8468:145:6;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;8468:145:6;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;2562:139;;8:9:-1;5:2;;;30:1;27;20:12;5:2;2562:139:6;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;2562:139:6;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;7361:204;;8:9:-1;5:2;;;30:1;27;20:12;5:2;7361:204:6;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;7361:204:6;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;23:1:-1;8:100;33:3;30:1;27:10;8:100;;;99:1;94:3;90:11;84:18;80:1;75:3;71:11;64:39;52:2;49:1;45:10;40:15;;8:100;;;12:14;7361:204:6;;;;;;;;;;;;;;;;1706:113;;8:9:-1;5:2;;;30:1;27;20:12;5:2;1706:113:6;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;1706:113:6;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;11109:127;;8:9:-1;5:2;;;30:1;27;20:12;5:2;11109:127:6;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;11109:127:6;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;12161:181;;8:9:-1;5:2;;;30:1;27;20:12;5:2;12161:181:6;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;12161:181:6;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;5816:155;;8:9:-1;5:2;;;30:1;27;20:12;5:2;5816:155:6;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;5816:155:6;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;14081:153;;8:9:-1;5:2;;;30:1;27;20:12;5:2;14081:153:6;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;14081:153:6;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;1356:141;;8:9:-1;5:2;;;30:1;27;20:12;5:2;1356:141:6;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;1356:141:6;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;4807:155;;8:9:-1;5:2;;;30:1;27;20:12;5:2;4807:155:6;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;23:1:-1;8:100;33:3;30:1;27:10;8:100;;;99:1;94:3;90:11;84:18;80:1;75:3;71:11;64:39;52:2;49:1;45:10;40:15;;8:100;;;12:14;4807:155:6;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2906:140;;8:9:-1;5:2;;;30:1;27;20:12;5:2;2906:140:6;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;2906:140:6;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;1569:126:7;;8:9:-1;5:2;;;30:1;27;20:12;5:2;1569:126:7;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;1569:126:7;;;;;;;;;;;;;;;;;;;:::i;:::-;;4312:199:6;;8:9:-1;5:2;;;30:1;27;20:12;5:2;4312:199:6;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;4312:199:6;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;23:1:-1;8:100;33:3;30:1;27:10;8:100;;;99:1;94:3;90:11;84:18;80:1;75:3;71:11;64:39;52:2;49:1;45:10;40:15;;8:100;;;12:14;4312:199:6;;;;;;;;;;;;;;;;;;;;;;;;;;;;;9413:105;;8:9:-1;5:2;;;30:1;27;20:12;5:2;9413:105:6;;;:::i;:::-;;;;;;;;;;;23:1:-1;8:100;33:3;30:1;27:10;8:100;;;99:1;94:3;90:11;84:18;80:1;75:3;71:11;64:39;52:2;49:1;45:10;40:15;;8:100;;;12:14;9413:105:6;;;;;;;;;;;;;;;;6946:159;;8:9:-1;5:2;;;30:1;27;20:12;5:2;6946:159:6;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;6946:159:6;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;5165:143;;8:9:-1;5:2;;;30:1;27;20:12;5:2;5165:143:6;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;5165:143:6;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;957:138;;8:9:-1;5:2;;;30:1;27;20:12;5:2;957:138:6;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;957:138:6;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;10100:155;;8:9:-1;5:2;;;30:1;27;20:12;5:2;10100:155:6;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;10100:155:6;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;10682:177;;8:9:-1;5:2;;;30:1;27;20:12;5:2;10682:177:6;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;10682:177:6;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;23:1:-1;8:100;33:3;30:1;27:10;8:100;;;99:1;94:3;90:11;84:18;80:1;75:3;71:11;64:39;52:2;49:1;45:10;40:15;;8:100;;;12:14;10682:177:6;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;23:1:-1;8:100;33:3;30:1;27:10;8:100;;;99:1;94:3;90:11;84:18;80:1;75:3;71:11;64:39;52:2;49:1;45:10;40:15;;8:100;;;12:14;10682:177:6;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;6191:109;;8:9:-1;5:2;;;30:1;27;20:12;5:2;6191:109:6;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;8780:149;8852:4;8879:42;8910:10;8879:6;:30;;:42;;;;:::i;:::-;8872:49;;8780:149;;;:::o;11541:187::-;11632:14;;:::i;:::-;11665:55;11698:10;11709;11665:6;:32;;:55;;;;;:::i;:::-;11658:62;;11541:187;;;;:::o;3405:123::-;3466:7;3492:28;3514:5;3492:6;:21;;:28;;;;:::i;:::-;3485:35;;3405:123;;;:::o;11834:101::-;11877:13;11909:18;:6;:16;:18::i;:::-;11902:25;;11834:101;:::o;7669:97::-;7710:13;7742:16;:6;:14;:16::i;:::-;7735:23;;7669:97;:::o;14351:::-;14397:4;14420:20;:6;:18;:20::i;:::-;14413:27;;14351:97;:::o;13284:134::-;13336:4;13342;13347:13;13383:27;:6;:25;:27::i;:::-;13376:34;;;;;;13284:134;;;:::o;9152:148::-;9225:4;9252:40;9283:8;9252:6;:30;;:40;;;;:::i;:::-;9245:47;;9152:148;;;:::o;6551:142::-;6619:4;6624;6647:38;6674:10;6647:6;:26;;:38;;;;:::i;:::-;6640:45;;;;6551:142;;;:::o;13704:149::-;13781:4;13804:41;13823:10;13834;13804:6;:18;;:41;;;;;:::i;:::-;13797:48;;13704:149;;;;:::o;8139:153::-;8215:4;8238:46;8273:10;8238:6;:34;;:46;;;;:::i;:::-;8231:53;;8139:153;;;:::o;1276:96:7:-;1335:29;1354:9;1335:6;:18;;:29;;;;:::i;:::-;1276:96;:::o;2100:148:6:-;2178:4;2202:6;:18;;;;2221:5;2227:12;2202:38;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;2202:38:6;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;2202:38:6;;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;2202:38:6;;;;;;;;;;;;;;;;2195:45;;2100:148;;;;:::o;12929:110::-;12984:4;13007:24;13025:5;13007:6;:17;;:24;;;;:::i;:::-;13000:31;;12929:110;;;:::o;8468:145::-;8540:4;8563:42;8598:6;8563;:34;;:42;;;;:::i;:::-;8556:49;;8468:145;;;:::o;2562:139::-;2637:4;2660:33;2675:10;2686:6;2660;:14;;:33;;;;;:::i;:::-;2653:40;;2562:139;;;;:::o;7361:204::-;7459:17;;:::i;:::-;7495:62;7535:10;7546;7495:6;:39;;:62;;;;;:::i;:::-;7488:69;;7361:204;;;;:::o;1706:113::-;1763:4;1788:6;:16;;;;1805:5;1788:23;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;1788:23:6;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;1788:23:6;;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;1788:23:6;;;;;;;;;;;;;;;;1781:30;;1706:113;;;:::o;11109:127::-;11171:4;11176;11199:29;11220:7;11199:6;:20;;:29;;;;:::i;:::-;11192:36;;;;11109:127;;;:::o;12161:181::-;12254:4;12277:57;12316:10;12327:6;12277;:38;;:57;;;;;:::i;:::-;12270:64;;12161:181;;;;:::o;5816:155::-;5897:4;5920:43;5946:10;5957:5;5920:6;:25;;:43;;;;;:::i;:::-;5913:50;;5816:155;;;;:::o;14081:153::-;14160:4;14184:42;14204:10;14215;14184:6;:19;;:42;;;;;:::i;:::-;14177:49;;14081:153;;;;:::o;1356:141::-;1430:4;1453:6;:21;;;;1475:5;1481:7;1453:36;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;1453:36:6;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;1453:36:6;;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;1453:36:6;;;;;;;;;;;;;;;;1446:43;;1356:141;;;;:::o;4807:155::-;4860:7;4869:4;4875;4880:13;4894:4;4899;4926:28;:6;:26;:28::i;:::-;4919:35;;;;;;;;;;;;4807:155;;;;;;:::o;2906:140::-;2980:4;3003:35;3018:10;3029:8;3003:6;:14;;:35;;;;;:::i;:::-;2996:42;;2906:140;;;;:::o;1569:126:7:-;1643:44;1671:15;1643:6;:27;;:44;;;;:::i;:::-;1569:126;:::o;4312:199:6:-;4376:7;4385:4;4391;4397;4403:7;4412;4421;4429:14;;:::i;:::-;4445:3;4467:36;4492:10;4467:6;:24;;:36;;;;:::i;:::-;4460:43;;;;;;;;;;;;;;;;;;4312:199;;;;;;;;;;;:::o;9413:105::-;9456:15;;:::i;:::-;9490:20;:6;:18;:20::i;:::-;9483:27;;9413:105;:::o;6946:159::-;7028:4;7051:46;7075:10;7086;7051:6;:23;;:46;;;;;:::i;:::-;7044:53;;6946:159;;;;:::o;5165:143::-;5237:4;5261:39;5294:5;5261:6;:32;;:39;;;;:::i;:::-;5253:47;;5165:143;;;:::o;957:138::-;1032:4;1055:6;:16;;;;1072:5;1078:8;1055:32;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;1055:32:6;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;1055:32:6;;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;1055:32:6;;;;;;;;;;;;;;;;1048:39;;957:138;;;;:::o;10100:155::-;10181:4;10204:43;10230:10;10241:5;10204:6;:25;;:43;;;;;:::i;:::-;10197:50;;10100:155;;;;:::o;10682:177::-;10745:13;10760;10774:7;10782:4;10788;10794;10818:33;10840:10;10818:6;:21;;:33;;;;:::i;:::-;10811:40;;;;;;;;;;;;10682:177;;;;;;;:::o;6191:109::-;6240:4;6245;6268:24;:6;:22;:24::i;:::-;6261:31;;;;6191:109;;:::o;10224:192:10:-;10344:4;10371;:25;;:37;10397:10;10371:37;;;;;;;;;;;;10364:44;;10224:192;;;;:::o;13564:241::-;13703:14;;:::i;:::-;13736:4;:19;;:31;13756:10;13736:31;;;;;;;;;;;:49;;:61;13786:10;13736:61;;;;;;;;;;;13729:68;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;13564:241;;;;;:::o;2894:166::-;3003:7;3029:4;:16;;:23;3046:5;3029:23;;;;;;;;;;;;;;;;;;;;;3022:30;;2894:166;;;;:::o;13912:133::-;14001:13;14026:11;;;;;;;;;;;;;;;;;;;13912:133;;;:::o;8933:144::-;9020:13;9045:24;;;;;;;;;;;;;;;;;;;8933:144;;;:::o;17437:163::-;17529:4;17552;:13;;:40;17566:25;;;;;;;;;;;;;;;;;;;17552:40;;;;;;;;;;;;17545:47;;17437:163;;;:::o;15488:331::-;15586:4;15592;15597:13;15623:17;15643:21;15659:4;15643:15;:21::i;:::-;15623:41;;15683:12;15696:4;:19;;:33;15716:12;15696:33;;;;;;;;;;;:45;;:68;15742:21;;;;;;;;;;;;;;;;;;;15696:68;;;;;;;;;;;;15765:4;:19;;:33;15785:12;15765:33;;;;;;;;;;;:45;;15675:136;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;15488:331;;;;;:::o;10637:195::-;10760:4;10787;:25;;:37;10813:10;10787:37;;;;;;;;;;;;10780:44;;10637:195;;;;:::o;7402:461::-;7517:4;7522;7538:38;7579:4;:19;;:31;7599:10;7579:31;;;;;;;;;;;7538:72;;7661:1;7625:8;:26;;:33;;;;:37;7622:234;;;7686:95;7699:4;7704:10;7715:8;:26;;7778:1;7742:8;:26;;:33;;;;:37;7715:65;;;;;;;;;;;;;;;;7686:12;:95::i;:::-;7782:4;7678:109;;;;;;;7622:234;7836:1;7838:5;7828:16;;;;;;;;7402:461;;;;;;:::o;16648:209::-;16773:4;16796;:19;;:31;16816:10;16796:31;;;;;;;;;;;:41;;:53;16838:10;16796:53;;;;;;;;;;;;;;;;;;;;;16789:60;;16648:209;;;;;:::o;9450:211::-;9574:4;9597;:19;;:31;9617:10;9597:31;;;;;;;;;;;:49;;:56;;;;9590:63;;9450:211;;;;:::o;830:234::-;986:10;945:51;;:4;:16;;:37;962:19;;;;;;;;;;;;;;;;;;;945:37;;;;;;;;;;;;;;;;;;;;;:51;;;937:60;;;;;;1047:9;1008:4;:16;;:37;1025:19;;;;;;;;;;;;;;;;;;;1008:37;;;;;;;;;;;;:48;;;;;;;;;;;;;;;;;;830:234;;:::o;15088:155::-;15192:4;15215;:13;;:20;15229:5;15215:20;;;;;;;;;;;;15208:27;;15088:155;;;;:::o;9837:220::-;9957:4;9991:2;9981:6;:12;;9973:21;;;;;;10012:4;:29;;:37;10042:6;10012:37;;;;;;;;;;;;10005:44;;9837:220;;;;:::o;1924:195::-;2046:4;2069;:22;;:34;2092:10;2069:34;;;;;;;;;;;:42;2104:6;2069:42;;;;;;;;;;;;;;;;;;;;;;;;;2062:49;;1924:195;;;;;:::o;8581:247::-;8727:17;;:::i;:::-;8763:4;:19;;:31;8783:10;8763:31;;;;;;;;;;;:45;;:57;8809:10;8763:57;;;;;;;;;;;8756:64;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;8581:247;;;;;:::o;13039:226::-;13148:4;13153;13177;:18;;:27;13196:7;13177:27;;;;;;;;;;;;;;;:41;;;13219:4;:18;;:27;13238:7;13219:27;;;;;;;;;;;;;;;:37;;;13169:88;;;;13039:226;;;;;:::o;14273:228::-;14413:4;14436;:19;;:31;14456:10;14436:31;;;;;;;;;;;:49;;14486:6;14436:57;;;;;;;;;;;;;;;;14429:64;;14273:228;;;;;:::o;6438:211::-;6566:4;6589;:17;;:29;6607:10;6589:29;;;;;;;;;;;:45;;:52;6635:5;6589:52;;;;;;;;;;;;6582:59;;6438:211;;;;;:::o;17106:214::-;17233:4;17257;:19;;:31;17277:10;17257:31;;;;;;;;;;;:43;;:55;17301:10;17257:55;;;;;;;;;;;;17250:62;;17106:214;;;;;:::o;4981:563::-;5080:7;5089:4;5095;5100:13;5114:4;5119;5147;:21;;;5169:4;:13;;:44;5183:29;;;;;;;;;;;;;;;;;;;5169:44;;;;;;;;;;;;5214:4;:13;;:38;5228:23;;;;;;;;;;;;;;;;;;;5214:38;;;;;;;;;;;;5253:4;:19;;:65;5273:4;:13;;:44;5287:29;;;;;;;;;;;;;;;;;;;5273:44;;;;;;;;;;;;5253:65;;;;;;;;;;;:77;;5331:4;:19;;:65;5351:4;:13;;:44;5365:29;;;;;;;;;;;;;;;;;;;5351:44;;;;;;;;;;;;5331:65;;;;;;;;;;;:77;;:103;5409:24;;;;;;;;;;;;;;;;;;;5331:103;;;;;;;;;;;;5435:4;:19;;:65;5455:4;:13;;:44;5469:29;;;;;;;;;;;;;;;;;;;5455:44;;;;;;;;;;;;5435:65;;;;;;;;;;;:77;;:100;5513:21;;;;;;;;;;;;;;;;;;;5435:100;;;;;;;;;;;;5139:397;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;4981:563;;;;;;;:::o;2338:197::-;2459:4;2482;:17;;:29;2500:10;2482:29;;;;;;;;;;;:35;;:45;2518:8;2482:45;;;;;;;;;;;;;;;;;;;;;;;;;2475:52;;2338:197;;;;;:::o;1271:311::-;1441:10;1400:51;;:4;:16;;:37;1417:19;;;;;;;;;;;;;;;;;;;1400:37;;;;;;;;;;;;;;;;;;;;;:51;;;1392:60;;;;;;1510:15;1463:4;:16;;:45;1480:27;;;;;;;;;;;;;;;;;;;1463:45;;;;;;;;;;;;:62;;;;;;;;;;;;;;;;;;1541:33;1558:15;1541:33;;;;;;;;;;;;;;;;;;;;;;1271:311;;:::o;3844:845::-;3957:7;3966:4;3972;3978;3984:7;3993;4002;4010:14;;:::i;:::-;4026:3;4041:34;4078:4;:17;;:29;4096:10;4078:29;;;;;;;;;;;4041:66;;4125:4;:9;;;4135:4;:13;;;;;;;;;;;;4150:4;:22;;;;;;;;;;;;4174:4;:15;;;;;;;;;;;;4191:4;:18;;;;;;;;;;;;4211:4;:19;;;;;;;;;;;;4231:4;:24;;;;;;;;;;;;4118:563;;;;;;;;4257:4;:20;;:44;4278:22;;;;;;;;;;;;;;;;;;;4257:44;;;;;;;;;;;;4118:563;;;;4303:4;:20;;:44;4324:22;;;;;;;;;;;;;;;;;;;4303:44;;;;;;;;;;;;4118:563;;;;4349:4;:20;;:40;4370:18;;;;;;;;;;;;;;;;;;;4349:40;;;;;;;;;;;;4118:563;;;;4391:4;:20;;:51;4412:29;;;;;;;;;;;;;;;;;;;4391:51;;;;;;;;;;;;4118:563;;;;4444:4;:20;;:48;4465:26;;;;;;;;;;;;;;;;;;;4444:48;;;;;;;;;;;;4118:563;;;;4494:4;:20;;:46;4515:24;;;;;;;;;;;;;;;;;;;4494:46;;;;;;;;;;;;4118:563;;;;4542:4;:20;;:44;4563:22;;;;;;;;;;;;;;;;;;;4542:44;;;;;;;;;;;;4118:563;;;;4588:4;:20;;:41;4609:19;;;;;;;;;;;;;;;;;;;4588:41;;;;;;;;;;;;4118:563;;;;4630:4;:20;;:38;4651:16;;;;;;;;;;;;;;;;;;;4630:38;;;;;;;;;;;;4118:563;;;4670:4;:10;;;4118:563;;;;;;;;;;;;;;;;;;;3844:845;;;;;;;;;;;:::o;10945:146::-;11036:15;;:::i;:::-;11070:4;:13;;11063:20;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;10945:146;;;:::o;8108:217::-;8237:4;8260;:19;;:31;8280:10;8260:31;;;;;;;;;;;:45;;:57;8306:10;8260:57;;;;;;;;;;;;8253:64;;8108:217;;;;;:::o;5749:185::-;5868:4;5892;:27;;:34;5920:5;5892:34;;;;;;;;;;;;5884:42;;5749:185;;;;:::o;11673:209::-;11801:4;11824;:19;;:31;11844:10;11824:31;;;;;;;;;;;:43;;:50;11868:5;11824:50;;;;;;;;;;;;11817:57;;11673:209;;;;;:::o;12309:480::-;12419:13;12433;12448:7;12456:4;12462;12468;12485:38;12526:4;:19;;:31;12546:10;12526:31;;;;;;;;;;;12485:72;;12577:8;:20;;12598:8;:19;;12618:8;:18;;;12638:8;:20;;:46;12659:24;;;;;;;;;;;;;;;;;;;12638:46;;;;;;;;;;;;12685:8;:20;;:51;12706:29;;;;;;;;;;;;;;;;;;;12685:51;;;;;;;;;;;;12737:8;:20;;:43;12758:21;;;;;;;;;;;;;;;;;;;12737:43;;;;;;;;;;;;12569:212;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;12309:480;;;;;;;;:::o;6873:278::-;6968:4;6973;6997:140;7010:4;7015;:25;;:73;7041:4;:13;;:46;7055:31;;;;;;;;;;;;;;;;;;;7041:46;;;;;;;;;;;;7015:73;;;;;;;;;;;;7090:4;:13;;:46;7104:31;;;;;;;;;;;;;;;;;;;7090:46;;;;;;;;;;;;6997:12;:140::i;:::-;7138:4;6989:154;;;;6873:278;;;:::o;16069:297::-;16164:15;16195:9;16219:11;16261:31;16278:4;:13;;16261:31;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:16;:31::i;:::-;16245:47;;;;;;;;16321:4;:29;;:37;16351:6;16321:37;;;;;;;;;;;;16308:50;;16069:297;;;;;:::o;319:310:15:-;379:11;391:16;426:4;431:1;426:7;;;;;;;;;;;420:13;;467:6;474:1;467:8;;463:159;480:11;476:1;:15;463:159;;;524:3;514:4;519:1;514:7;;;;;;;;;;;:13;511:100;;;553:4;558:1;553:7;;;;;;;;;;;547:13;;590:1;579:12;;511:100;492:3;;;;;;;463:159;;;;319:310;;;:::o;336:2182:7:-;;;;;;;;;;;29:2:-1;21:6;17:15;117:4;105:10;97:6;88:34;148:4;140:6;136:17;126:27;;0:157;336:2182:7;;;;:::o;:::-;;;;;;;;;;;29:2:-1;21:6;17:15;117:4;105:10;97:6;88:34;148:4;140:6;136:17;126:27;;0:157;336:2182:7;;;;:::o;:::-;;;;;;;;;;;29:2:-1;21:6;17:15;117:4;105:10;97:6;88:34;148:4;140:6;136:17;126:27;;0:157;336:2182:7;;;;:::o;:::-;;;;;;;;;;;29:2:-1;21:6;17:15;117:4;105:10;97:6;88:34;148:4;140:6;136:17;126:27;;0:157;336:2182:7;;;;:::o",
  "source": "pragma solidity ^0.5.0;\r\n\r\nimport \"./TellorGetters.sol\";\r\n\r\n/**\r\n* @title Tellor Master\r\n* @dev This is the Master contract with all tellor getter functions and delegate call to Tellor. \r\n* The logic for the functions on this contract is saved on the TellorGettersLibrary, TellorTransfer, \r\n* TellorGettersLibrary, and TellorStake\r\n*/\r\ncontract TellorMaster is TellorGetters{\r\n    \r\n    event NewTellorAddress(address _newTellor);\r\n\r\n    /**\r\n    * @dev The constructor sets the original `tellorStorageOwner` of the contract to the sender\r\n    * account, the tellor contract to the Tellor master address and owner to the Tellor master owner address \r\n    * @param _tellorContract is the address for the tellor contract\r\n    */\r\n    constructor (address _tellorContract)  public{\r\n        tellor.init();\r\n        tellor.addressVars[keccak256(\"_owner\")] = msg.sender;\r\n        tellor.addressVars[keccak256(\"_deity\")] = msg.sender;\r\n        tellor.addressVars[keccak256(\"tellorContract\")]= _tellorContract;\r\n        emit NewTellorAddress(_tellorContract);\r\n    }\r\n    \r\n\r\n    /**\r\n    * @dev Gets the 5 miners who mined the value for the specified requestId/_timestamp \r\n    * @dev Only needs to be in library\r\n    * @param _newDeity the new Deity in the contract\r\n    */\r\n\r\n    function changeDeity(address _newDeity) external{\r\n        tellor.changeDeity(_newDeity);\r\n    }\r\n\r\n\r\n    /**\r\n    * @dev  allows for the deity to make fast upgrades.  Deity should be 0 address if decentralized\r\n    * @param _tellorContract the address of the new Tellor Contract\r\n    */\r\n    function changeTellorContract(address _tellorContract) external{\r\n        tellor.changeTellorContract(_tellorContract);\r\n    }\r\n  \r\n\r\n    /**\r\n    * @dev This is the fallback function that allows contracts to call the tellor contract at the address stored\r\n    */\r\n    function () external payable {\r\n        address addr = tellor.addressVars[keccak256(\"tellorContract\")];\r\n        bytes memory _calldata = msg.data;\r\n        assembly {\r\n            let result := delegatecall(not(0), addr, add(_calldata, 0x20), mload(_calldata), 0, 0)\r\n            let size := returndatasize\r\n            let ptr := mload(0x40)\r\n            returndatacopy(ptr, 0, size)\r\n            // revert instead of invalid() bc if the underlying call failed with invalid() it already wasted gas.\r\n            // if the call returned error data, forward it\r\n            switch result case 0 { revert(ptr, size) }\r\n            default { return(ptr, size) }\r\n        }\r\n    }\r\n}",
  "sourcePath": "C:\\company\\code\\open-oracle\\contracts\\Tellor\\TellorMaster.sol",
  "ast": {
    "absolutePath": "/C/company/code/open-oracle/contracts/Tellor/TellorMaster.sol",
    "exportedSymbols": {
      "TellorMaster": [
        1622
      ]
    },
    "id": 1623,
    "nodeType": "SourceUnit",
    "nodes": [
      {
        "id": 1524,
        "literals": [
          "solidity",
          "^",
          "0.5",
          ".0"
        ],
        "nodeType": "PragmaDirective",
        "src": "0:23:7"
      },
      {
        "absolutePath": "/C/company/code/open-oracle/contracts/Tellor/TellorGetters.sol",
        "file": "./TellorGetters.sol",
        "id": 1525,
        "nodeType": "ImportDirective",
        "scope": 1623,
        "sourceUnit": 1523,
        "src": "27:29:7",
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "baseContracts": [
          {
            "arguments": null,
            "baseName": {
              "contractScope": null,
              "id": 1526,
              "name": "TellorGetters",
              "nodeType": "UserDefinedTypeName",
              "referencedDeclaration": 1522,
              "src": "361:13:7",
              "typeDescriptions": {
                "typeIdentifier": "t_contract$_TellorGetters_$1522",
                "typeString": "contract TellorGetters"
              }
            },
            "id": 1527,
            "nodeType": "InheritanceSpecifier",
            "src": "361:13:7"
          }
        ],
        "contractDependencies": [
          1522
        ],
        "contractKind": "contract",
        "documentation": "@title Tellor Master\r\n@dev This is the Master contract with all tellor getter functions and delegate call to Tellor. \r\nThe logic for the functions on this contract is saved on the TellorGettersLibrary, TellorTransfer, \r\nTellorGettersLibrary, and TellorStake\r",
        "fullyImplemented": true,
        "id": 1622,
        "linearizedBaseContracts": [
          1622,
          1522
        ],
        "name": "TellorMaster",
        "nodeType": "ContractDefinition",
        "nodes": [
          {
            "anonymous": false,
            "documentation": null,
            "id": 1531,
            "name": "NewTellorAddress",
            "nodeType": "EventDefinition",
            "parameters": {
              "id": 1530,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 1529,
                  "indexed": false,
                  "name": "_newTellor",
                  "nodeType": "VariableDeclaration",
                  "scope": 1531,
                  "src": "410:18:7",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 1528,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "410:7:7",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "409:20:7"
            },
            "src": "387:43:7"
          },
          {
            "body": {
              "id": 1577,
              "nodeType": "Block",
              "src": "777:282:7",
              "statements": [
                {
                  "expression": {
                    "argumentTypes": null,
                    "arguments": [],
                    "expression": {
                      "argumentTypes": [],
                      "expression": {
                        "argumentTypes": null,
                        "id": 1536,
                        "name": "tellor",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 1033,
                        "src": "788:6:7",
                        "typeDescriptions": {
                          "typeIdentifier": "t_struct$_TellorStorageStruct_$5737_storage",
                          "typeString": "struct TellorStorage.TellorStorageStruct storage ref"
                        }
                      },
                      "id": 1538,
                      "isConstant": false,
                      "isLValue": true,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberName": "init",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": 5390,
                      "src": "788:11:7",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_delegatecall_nonpayable$_t_struct$_TellorStorageStruct_$5737_storage_ptr_$returns$__$bound_to$_t_struct$_TellorStorageStruct_$5737_storage_ptr_$",
                        "typeString": "function (struct TellorStorage.TellorStorageStruct storage pointer)"
                      }
                    },
                    "id": 1539,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "788:13:7",
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 1540,
                  "nodeType": "ExpressionStatement",
                  "src": "788:13:7"
                },
                {
                  "expression": {
                    "argumentTypes": null,
                    "id": 1550,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "argumentTypes": null,
                      "baseExpression": {
                        "argumentTypes": null,
                        "expression": {
                          "argumentTypes": null,
                          "id": 1541,
                          "name": "tellor",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 1033,
                          "src": "812:6:7",
                          "typeDescriptions": {
                            "typeIdentifier": "t_struct$_TellorStorageStruct_$5737_storage",
                            "typeString": "struct TellorStorage.TellorStorageStruct storage ref"
                          }
                        },
                        "id": 1546,
                        "isConstant": false,
                        "isLValue": true,
                        "isPure": false,
                        "lValueRequested": false,
                        "memberName": "addressVars",
                        "nodeType": "MemberAccess",
                        "referencedDeclaration": 5687,
                        "src": "812:18:7",
                        "typeDescriptions": {
                          "typeIdentifier": "t_mapping$_t_bytes32_$_t_address_$",
                          "typeString": "mapping(bytes32 => address)"
                        }
                      },
                      "id": 1547,
                      "indexExpression": {
                        "argumentTypes": null,
                        "arguments": [
                          {
                            "argumentTypes": null,
                            "hexValue": "5f6f776e6572",
                            "id": 1544,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "kind": "string",
                            "lValueRequested": false,
                            "nodeType": "Literal",
                            "src": "841:8:7",
                            "subdenomination": null,
                            "typeDescriptions": {
                              "typeIdentifier": "t_stringliteral_9dbc393ddc18fd27b1d9b1b129059925688d2f2d5818a5ec3ebb750b7c286ea6",
                              "typeString": "literal_string \"_owner\""
                            },
                            "value": "_owner"
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_stringliteral_9dbc393ddc18fd27b1d9b1b129059925688d2f2d5818a5ec3ebb750b7c286ea6",
                              "typeString": "literal_string \"_owner\""
                            }
                          ],
                          "id": 1543,
                          "name": "keccak256",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 7796,
                          "src": "831:9:7",
                          "typeDescriptions": {
                            "typeIdentifier": "t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$",
                            "typeString": "function (bytes memory) pure returns (bytes32)"
                          }
                        },
                        "id": 1545,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "functionCall",
                        "lValueRequested": false,
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "831:19:7",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes32",
                          "typeString": "bytes32"
                        }
                      },
                      "isConstant": false,
                      "isLValue": true,
                      "isPure": false,
                      "lValueRequested": true,
                      "nodeType": "IndexAccess",
                      "src": "812:39:7",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "argumentTypes": null,
                      "expression": {
                        "argumentTypes": null,
                        "id": 1548,
                        "name": "msg",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 7802,
                        "src": "854:3:7",
                        "typeDescriptions": {
                          "typeIdentifier": "t_magic_message",
                          "typeString": "msg"
                        }
                      },
                      "id": 1549,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberName": "sender",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": null,
                      "src": "854:10:7",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address_payable",
                        "typeString": "address payable"
                      }
                    },
                    "src": "812:52:7",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "id": 1551,
                  "nodeType": "ExpressionStatement",
                  "src": "812:52:7"
                },
                {
                  "expression": {
                    "argumentTypes": null,
                    "id": 1561,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "argumentTypes": null,
                      "baseExpression": {
                        "argumentTypes": null,
                        "expression": {
                          "argumentTypes": null,
                          "id": 1552,
                          "name": "tellor",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 1033,
                          "src": "875:6:7",
                          "typeDescriptions": {
                            "typeIdentifier": "t_struct$_TellorStorageStruct_$5737_storage",
                            "typeString": "struct TellorStorage.TellorStorageStruct storage ref"
                          }
                        },
                        "id": 1557,
                        "isConstant": false,
                        "isLValue": true,
                        "isPure": false,
                        "lValueRequested": false,
                        "memberName": "addressVars",
                        "nodeType": "MemberAccess",
                        "referencedDeclaration": 5687,
                        "src": "875:18:7",
                        "typeDescriptions": {
                          "typeIdentifier": "t_mapping$_t_bytes32_$_t_address_$",
                          "typeString": "mapping(bytes32 => address)"
                        }
                      },
                      "id": 1558,
                      "indexExpression": {
                        "argumentTypes": null,
                        "arguments": [
                          {
                            "argumentTypes": null,
                            "hexValue": "5f6465697479",
                            "id": 1555,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "kind": "string",
                            "lValueRequested": false,
                            "nodeType": "Literal",
                            "src": "904:8:7",
                            "subdenomination": null,
                            "typeDescriptions": {
                              "typeIdentifier": "t_stringliteral_c72fb71df90ec89e61e8dea6fee5142880a8a329caaae9ff4931955d88f59990",
                              "typeString": "literal_string \"_deity\""
                            },
                            "value": "_deity"
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_stringliteral_c72fb71df90ec89e61e8dea6fee5142880a8a329caaae9ff4931955d88f59990",
                              "typeString": "literal_string \"_deity\""
                            }
                          ],
                          "id": 1554,
                          "name": "keccak256",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 7796,
                          "src": "894:9:7",
                          "typeDescriptions": {
                            "typeIdentifier": "t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$",
                            "typeString": "function (bytes memory) pure returns (bytes32)"
                          }
                        },
                        "id": 1556,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "functionCall",
                        "lValueRequested": false,
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "894:19:7",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes32",
                          "typeString": "bytes32"
                        }
                      },
                      "isConstant": false,
                      "isLValue": true,
                      "isPure": false,
                      "lValueRequested": true,
                      "nodeType": "IndexAccess",
                      "src": "875:39:7",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "argumentTypes": null,
                      "expression": {
                        "argumentTypes": null,
                        "id": 1559,
                        "name": "msg",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 7802,
                        "src": "917:3:7",
                        "typeDescriptions": {
                          "typeIdentifier": "t_magic_message",
                          "typeString": "msg"
                        }
                      },
                      "id": 1560,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberName": "sender",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": null,
                      "src": "917:10:7",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address_payable",
                        "typeString": "address payable"
                      }
                    },
                    "src": "875:52:7",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "id": 1562,
                  "nodeType": "ExpressionStatement",
                  "src": "875:52:7"
                },
                {
                  "expression": {
                    "argumentTypes": null,
                    "id": 1571,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "argumentTypes": null,
                      "baseExpression": {
                        "argumentTypes": null,
                        "expression": {
                          "argumentTypes": null,
                          "id": 1563,
                          "name": "tellor",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 1033,
                          "src": "938:6:7",
                          "typeDescriptions": {
                            "typeIdentifier": "t_struct$_TellorStorageStruct_$5737_storage",
                            "typeString": "struct TellorStorage.TellorStorageStruct storage ref"
                          }
                        },
                        "id": 1568,
                        "isConstant": false,
                        "isLValue": true,
                        "isPure": false,
                        "lValueRequested": false,
                        "memberName": "addressVars",
                        "nodeType": "MemberAccess",
                        "referencedDeclaration": 5687,
                        "src": "938:18:7",
                        "typeDescriptions": {
                          "typeIdentifier": "t_mapping$_t_bytes32_$_t_address_$",
                          "typeString": "mapping(bytes32 => address)"
                        }
                      },
                      "id": 1569,
                      "indexExpression": {
                        "argumentTypes": null,
                        "arguments": [
                          {
                            "argumentTypes": null,
                            "hexValue": "74656c6c6f72436f6e7472616374",
                            "id": 1566,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "kind": "string",
                            "lValueRequested": false,
                            "nodeType": "Literal",
                            "src": "967:16:7",
                            "subdenomination": null,
                            "typeDescriptions": {
                              "typeIdentifier": "t_stringliteral_d48fd09afdab521f4f69bd2af8177f60fb0709ce0f1b3d5b8a2e233a20453848",
                              "typeString": "literal_string \"tellorContract\""
                            },
                            "value": "tellorContract"
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_stringliteral_d48fd09afdab521f4f69bd2af8177f60fb0709ce0f1b3d5b8a2e233a20453848",
                              "typeString": "literal_string \"tellorContract\""
                            }
                          ],
                          "id": 1565,
                          "name": "keccak256",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 7796,
                          "src": "957:9:7",
                          "typeDescriptions": {
                            "typeIdentifier": "t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$",
                            "typeString": "function (bytes memory) pure returns (bytes32)"
                          }
                        },
                        "id": 1567,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "functionCall",
                        "lValueRequested": false,
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "957:27:7",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes32",
                          "typeString": "bytes32"
                        }
                      },
                      "isConstant": false,
                      "isLValue": true,
                      "isPure": false,
                      "lValueRequested": true,
                      "nodeType": "IndexAccess",
                      "src": "938:47:7",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "argumentTypes": null,
                      "id": 1570,
                      "name": "_tellorContract",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 1533,
                      "src": "987:15:7",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      }
                    },
                    "src": "938:64:7",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "id": 1572,
                  "nodeType": "ExpressionStatement",
                  "src": "938:64:7"
                },
                {
                  "eventCall": {
                    "argumentTypes": null,
                    "arguments": [
                      {
                        "argumentTypes": null,
                        "id": 1574,
                        "name": "_tellorContract",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 1533,
                        "src": "1035:15:7",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      ],
                      "id": 1573,
                      "name": "NewTellorAddress",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 1531,
                      "src": "1018:16:7",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_event_nonpayable$_t_address_$returns$__$",
                        "typeString": "function (address)"
                      }
                    },
                    "id": 1575,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "1018:33:7",
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 1576,
                  "nodeType": "EmitStatement",
                  "src": "1013:38:7"
                }
              ]
            },
            "documentation": "@dev The constructor sets the original `tellorStorageOwner` of the contract to the sender\r\naccount, the tellor contract to the Tellor master address and owner to the Tellor master owner address \r\n@param _tellorContract is the address for the tellor contract\r",
            "id": 1578,
            "implemented": true,
            "kind": "constructor",
            "modifiers": [],
            "name": "",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 1534,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 1533,
                  "name": "_tellorContract",
                  "nodeType": "VariableDeclaration",
                  "scope": 1578,
                  "src": "745:23:7",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 1532,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "745:7:7",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "744:25:7"
            },
            "returnParameters": {
              "id": 1535,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "777:0:7"
            },
            "scope": 1622,
            "src": "732:327:7",
            "stateMutability": "nonpayable",
            "superFunction": null,
            "visibility": "public"
          },
          {
            "body": {
              "id": 1589,
              "nodeType": "Block",
              "src": "1324:48:7",
              "statements": [
                {
                  "expression": {
                    "argumentTypes": null,
                    "arguments": [
                      {
                        "argumentTypes": null,
                        "id": 1586,
                        "name": "_newDeity",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 1580,
                        "src": "1354:9:7",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      ],
                      "expression": {
                        "argumentTypes": null,
                        "id": 1583,
                        "name": "tellor",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 1033,
                        "src": "1335:6:7",
                        "typeDescriptions": {
                          "typeIdentifier": "t_struct$_TellorStorageStruct_$5737_storage",
                          "typeString": "struct TellorStorage.TellorStorageStruct storage ref"
                        }
                      },
                      "id": 1585,
                      "isConstant": false,
                      "isLValue": true,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberName": "changeDeity",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": 2823,
                      "src": "1335:18:7",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_nonpayable$_t_struct$_TellorStorageStruct_$5737_storage_ptr_$_t_address_$returns$__$bound_to$_t_struct$_TellorStorageStruct_$5737_storage_ptr_$",
                        "typeString": "function (struct TellorStorage.TellorStorageStruct storage pointer,address)"
                      }
                    },
                    "id": 1587,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "1335:29:7",
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 1588,
                  "nodeType": "ExpressionStatement",
                  "src": "1335:29:7"
                }
              ]
            },
            "documentation": "@dev Gets the 5 miners who mined the value for the specified requestId/_timestamp \r\n@dev Only needs to be in library\r\n@param _newDeity the new Deity in the contract\r",
            "id": 1590,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "changeDeity",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 1581,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 1580,
                  "name": "_newDeity",
                  "nodeType": "VariableDeclaration",
                  "scope": 1590,
                  "src": "1297:17:7",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 1579,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "1297:7:7",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "1296:19:7"
            },
            "returnParameters": {
              "id": 1582,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "1324:0:7"
            },
            "scope": 1622,
            "src": "1276:96:7",
            "stateMutability": "nonpayable",
            "superFunction": null,
            "visibility": "external"
          },
          {
            "body": {
              "id": 1601,
              "nodeType": "Block",
              "src": "1632:63:7",
              "statements": [
                {
                  "expression": {
                    "argumentTypes": null,
                    "arguments": [
                      {
                        "argumentTypes": null,
                        "id": 1598,
                        "name": "_tellorContract",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 1592,
                        "src": "1671:15:7",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      ],
                      "expression": {
                        "argumentTypes": null,
                        "id": 1595,
                        "name": "tellor",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 1033,
                        "src": "1643:6:7",
                        "typeDescriptions": {
                          "typeIdentifier": "t_struct$_TellorStorageStruct_$5737_storage",
                          "typeString": "struct TellorStorage.TellorStorageStruct storage ref"
                        }
                      },
                      "id": 1597,
                      "isConstant": false,
                      "isLValue": true,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberName": "changeTellorContract",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": 2857,
                      "src": "1643:27:7",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_nonpayable$_t_struct$_TellorStorageStruct_$5737_storage_ptr_$_t_address_$returns$__$bound_to$_t_struct$_TellorStorageStruct_$5737_storage_ptr_$",
                        "typeString": "function (struct TellorStorage.TellorStorageStruct storage pointer,address)"
                      }
                    },
                    "id": 1599,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "1643:44:7",
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 1600,
                  "nodeType": "ExpressionStatement",
                  "src": "1643:44:7"
                }
              ]
            },
            "documentation": "@dev  allows for the deity to make fast upgrades.  Deity should be 0 address if decentralized\r\n@param _tellorContract the address of the new Tellor Contract\r",
            "id": 1602,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "changeTellorContract",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 1593,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 1592,
                  "name": "_tellorContract",
                  "nodeType": "VariableDeclaration",
                  "scope": 1602,
                  "src": "1599:23:7",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 1591,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "1599:7:7",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "1598:25:7"
            },
            "returnParameters": {
              "id": 1594,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "1632:0:7"
            },
            "scope": 1622,
            "src": "1569:126:7",
            "stateMutability": "nonpayable",
            "superFunction": null,
            "visibility": "external"
          },
          {
            "body": {
              "id": 1620,
              "nodeType": "Block",
              "src": "1867:648:7",
              "statements": [
                {
                  "assignments": [
                    1606
                  ],
                  "declarations": [
                    {
                      "constant": false,
                      "id": 1606,
                      "name": "addr",
                      "nodeType": "VariableDeclaration",
                      "scope": 1620,
                      "src": "1878:12:7",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      },
                      "typeName": {
                        "id": 1605,
                        "name": "address",
                        "nodeType": "ElementaryTypeName",
                        "src": "1878:7:7",
                        "stateMutability": "nonpayable",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      "value": null,
                      "visibility": "internal"
                    }
                  ],
                  "id": 1613,
                  "initialValue": {
                    "argumentTypes": null,
                    "baseExpression": {
                      "argumentTypes": null,
                      "expression": {
                        "argumentTypes": null,
                        "id": 1607,
                        "name": "tellor",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 1033,
                        "src": "1893:6:7",
                        "typeDescriptions": {
                          "typeIdentifier": "t_struct$_TellorStorageStruct_$5737_storage",
                          "typeString": "struct TellorStorage.TellorStorageStruct storage ref"
                        }
                      },
                      "id": 1608,
                      "isConstant": false,
                      "isLValue": true,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberName": "addressVars",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": 5687,
                      "src": "1893:18:7",
                      "typeDescriptions": {
                        "typeIdentifier": "t_mapping$_t_bytes32_$_t_address_$",
                        "typeString": "mapping(bytes32 => address)"
                      }
                    },
                    "id": 1612,
                    "indexExpression": {
                      "argumentTypes": null,
                      "arguments": [
                        {
                          "argumentTypes": null,
                          "hexValue": "74656c6c6f72436f6e7472616374",
                          "id": 1610,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "kind": "string",
                          "lValueRequested": false,
                          "nodeType": "Literal",
                          "src": "1922:16:7",
                          "subdenomination": null,
                          "typeDescriptions": {
                            "typeIdentifier": "t_stringliteral_d48fd09afdab521f4f69bd2af8177f60fb0709ce0f1b3d5b8a2e233a20453848",
                            "typeString": "literal_string \"tellorContract\""
                          },
                          "value": "tellorContract"
                        }
                      ],
                      "expression": {
                        "argumentTypes": [
                          {
                            "typeIdentifier": "t_stringliteral_d48fd09afdab521f4f69bd2af8177f60fb0709ce0f1b3d5b8a2e233a20453848",
                            "typeString": "literal_string \"tellorContract\""
                          }
                        ],
                        "id": 1609,
                        "name": "keccak256",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 7796,
                        "src": "1912:9:7",
                        "typeDescriptions": {
                          "typeIdentifier": "t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$",
                          "typeString": "function (bytes memory) pure returns (bytes32)"
                        }
                      },
                      "id": 1611,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": true,
                      "kind": "functionCall",
                      "lValueRequested": false,
                      "names": [],
                      "nodeType": "FunctionCall",
                      "src": "1912:27:7",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bytes32",
                        "typeString": "bytes32"
                      }
                    },
                    "isConstant": false,
                    "isLValue": true,
                    "isPure": false,
                    "lValueRequested": false,
                    "nodeType": "IndexAccess",
                    "src": "1893:47:7",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "nodeType": "VariableDeclarationStatement",
                  "src": "1878:62:7"
                },
                {
                  "assignments": [
                    1615
                  ],
                  "declarations": [
                    {
                      "constant": false,
                      "id": 1615,
                      "name": "_calldata",
                      "nodeType": "VariableDeclaration",
                      "scope": 1620,
                      "src": "1951:22:7",
                      "stateVariable": false,
                      "storageLocation": "memory",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bytes_memory_ptr",
                        "typeString": "bytes"
                      },
                      "typeName": {
                        "id": 1614,
                        "name": "bytes",
                        "nodeType": "ElementaryTypeName",
                        "src": "1951:5:7",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes_storage_ptr",
                          "typeString": "bytes"
                        }
                      },
                      "value": null,
                      "visibility": "internal"
                    }
                  ],
                  "id": 1618,
                  "initialValue": {
                    "argumentTypes": null,
                    "expression": {
                      "argumentTypes": null,
                      "id": 1616,
                      "name": "msg",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 7802,
                      "src": "1976:3:7",
                      "typeDescriptions": {
                        "typeIdentifier": "t_magic_message",
                        "typeString": "msg"
                      }
                    },
                    "id": 1617,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "memberName": "data",
                    "nodeType": "MemberAccess",
                    "referencedDeclaration": null,
                    "src": "1976:8:7",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes_calldata_ptr",
                      "typeString": "bytes calldata"
                    }
                  },
                  "nodeType": "VariableDeclarationStatement",
                  "src": "1951:33:7"
                },
                {
                  "externalReferences": [
                    {
                      "_calldata": {
                        "declaration": 1615,
                        "isOffset": false,
                        "isSlot": false,
                        "src": "2088:9:7",
                        "valueSize": 1
                      }
                    },
                    {
                      "_calldata": {
                        "declaration": 1615,
                        "isOffset": false,
                        "isSlot": false,
                        "src": "2064:9:7",
                        "valueSize": 1
                      }
                    },
                    {
                      "addr": {
                        "declaration": 1606,
                        "isOffset": false,
                        "isSlot": false,
                        "src": "2054:4:7",
                        "valueSize": 1
                      }
                    }
                  ],
                  "id": 1619,
                  "nodeType": "InlineAssembly",
                  "operations": "{\n    let result := delegatecall(not(0), addr, add(_calldata, 0x20), mload(_calldata), 0, 0)\n    let size := returndatasize()\n    let ptr := mload(0x40)\n    returndatacopy(ptr, 0, size)\n    switch result\n    case 0 {\n        revert(ptr, size)\n    }\n    default {\n        return(ptr, size)\n    }\n}",
                  "src": "1995:513:7"
                }
              ]
            },
            "documentation": "@dev This is the fallback function that allows contracts to call the tellor contract at the address stored\r",
            "id": 1621,
            "implemented": true,
            "kind": "fallback",
            "modifiers": [],
            "name": "",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 1603,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "1847:2:7"
            },
            "returnParameters": {
              "id": 1604,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "1867:0:7"
            },
            "scope": 1622,
            "src": "1838:677:7",
            "stateMutability": "payable",
            "superFunction": null,
            "visibility": "external"
          }
        ],
        "scope": 1623,
        "src": "336:2182:7"
      }
    ],
    "src": "0:2518:7"
  },
  "legacyAST": {
    "absolutePath": "/C/company/code/open-oracle/contracts/Tellor/TellorMaster.sol",
    "exportedSymbols": {
      "TellorMaster": [
        1622
      ]
    },
    "id": 1623,
    "nodeType": "SourceUnit",
    "nodes": [
      {
        "id": 1524,
        "literals": [
          "solidity",
          "^",
          "0.5",
          ".0"
        ],
        "nodeType": "PragmaDirective",
        "src": "0:23:7"
      },
      {
        "absolutePath": "/C/company/code/open-oracle/contracts/Tellor/TellorGetters.sol",
        "file": "./TellorGetters.sol",
        "id": 1525,
        "nodeType": "ImportDirective",
        "scope": 1623,
        "sourceUnit": 1523,
        "src": "27:29:7",
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "baseContracts": [
          {
            "arguments": null,
            "baseName": {
              "contractScope": null,
              "id": 1526,
              "name": "TellorGetters",
              "nodeType": "UserDefinedTypeName",
              "referencedDeclaration": 1522,
              "src": "361:13:7",
              "typeDescriptions": {
                "typeIdentifier": "t_contract$_TellorGetters_$1522",
                "typeString": "contract TellorGetters"
              }
            },
            "id": 1527,
            "nodeType": "InheritanceSpecifier",
            "src": "361:13:7"
          }
        ],
        "contractDependencies": [
          1522
        ],
        "contractKind": "contract",
        "documentation": "@title Tellor Master\r\n@dev This is the Master contract with all tellor getter functions and delegate call to Tellor. \r\nThe logic for the functions on this contract is saved on the TellorGettersLibrary, TellorTransfer, \r\nTellorGettersLibrary, and TellorStake\r",
        "fullyImplemented": true,
        "id": 1622,
        "linearizedBaseContracts": [
          1622,
          1522
        ],
        "name": "TellorMaster",
        "nodeType": "ContractDefinition",
        "nodes": [
          {
            "anonymous": false,
            "documentation": null,
            "id": 1531,
            "name": "NewTellorAddress",
            "nodeType": "EventDefinition",
            "parameters": {
              "id": 1530,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 1529,
                  "indexed": false,
                  "name": "_newTellor",
                  "nodeType": "VariableDeclaration",
                  "scope": 1531,
                  "src": "410:18:7",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 1528,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "410:7:7",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "409:20:7"
            },
            "src": "387:43:7"
          },
          {
            "body": {
              "id": 1577,
              "nodeType": "Block",
              "src": "777:282:7",
              "statements": [
                {
                  "expression": {
                    "argumentTypes": null,
                    "arguments": [],
                    "expression": {
                      "argumentTypes": [],
                      "expression": {
                        "argumentTypes": null,
                        "id": 1536,
                        "name": "tellor",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 1033,
                        "src": "788:6:7",
                        "typeDescriptions": {
                          "typeIdentifier": "t_struct$_TellorStorageStruct_$5737_storage",
                          "typeString": "struct TellorStorage.TellorStorageStruct storage ref"
                        }
                      },
                      "id": 1538,
                      "isConstant": false,
                      "isLValue": true,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberName": "init",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": 5390,
                      "src": "788:11:7",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_delegatecall_nonpayable$_t_struct$_TellorStorageStruct_$5737_storage_ptr_$returns$__$bound_to$_t_struct$_TellorStorageStruct_$5737_storage_ptr_$",
                        "typeString": "function (struct TellorStorage.TellorStorageStruct storage pointer)"
                      }
                    },
                    "id": 1539,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "788:13:7",
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 1540,
                  "nodeType": "ExpressionStatement",
                  "src": "788:13:7"
                },
                {
                  "expression": {
                    "argumentTypes": null,
                    "id": 1550,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "argumentTypes": null,
                      "baseExpression": {
                        "argumentTypes": null,
                        "expression": {
                          "argumentTypes": null,
                          "id": 1541,
                          "name": "tellor",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 1033,
                          "src": "812:6:7",
                          "typeDescriptions": {
                            "typeIdentifier": "t_struct$_TellorStorageStruct_$5737_storage",
                            "typeString": "struct TellorStorage.TellorStorageStruct storage ref"
                          }
                        },
                        "id": 1546,
                        "isConstant": false,
                        "isLValue": true,
                        "isPure": false,
                        "lValueRequested": false,
                        "memberName": "addressVars",
                        "nodeType": "MemberAccess",
                        "referencedDeclaration": 5687,
                        "src": "812:18:7",
                        "typeDescriptions": {
                          "typeIdentifier": "t_mapping$_t_bytes32_$_t_address_$",
                          "typeString": "mapping(bytes32 => address)"
                        }
                      },
                      "id": 1547,
                      "indexExpression": {
                        "argumentTypes": null,
                        "arguments": [
                          {
                            "argumentTypes": null,
                            "hexValue": "5f6f776e6572",
                            "id": 1544,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "kind": "string",
                            "lValueRequested": false,
                            "nodeType": "Literal",
                            "src": "841:8:7",
                            "subdenomination": null,
                            "typeDescriptions": {
                              "typeIdentifier": "t_stringliteral_9dbc393ddc18fd27b1d9b1b129059925688d2f2d5818a5ec3ebb750b7c286ea6",
                              "typeString": "literal_string \"_owner\""
                            },
                            "value": "_owner"
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_stringliteral_9dbc393ddc18fd27b1d9b1b129059925688d2f2d5818a5ec3ebb750b7c286ea6",
                              "typeString": "literal_string \"_owner\""
                            }
                          ],
                          "id": 1543,
                          "name": "keccak256",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 7796,
                          "src": "831:9:7",
                          "typeDescriptions": {
                            "typeIdentifier": "t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$",
                            "typeString": "function (bytes memory) pure returns (bytes32)"
                          }
                        },
                        "id": 1545,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "functionCall",
                        "lValueRequested": false,
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "831:19:7",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes32",
                          "typeString": "bytes32"
                        }
                      },
                      "isConstant": false,
                      "isLValue": true,
                      "isPure": false,
                      "lValueRequested": true,
                      "nodeType": "IndexAccess",
                      "src": "812:39:7",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "argumentTypes": null,
                      "expression": {
                        "argumentTypes": null,
                        "id": 1548,
                        "name": "msg",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 7802,
                        "src": "854:3:7",
                        "typeDescriptions": {
                          "typeIdentifier": "t_magic_message",
                          "typeString": "msg"
                        }
                      },
                      "id": 1549,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberName": "sender",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": null,
                      "src": "854:10:7",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address_payable",
                        "typeString": "address payable"
                      }
                    },
                    "src": "812:52:7",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "id": 1551,
                  "nodeType": "ExpressionStatement",
                  "src": "812:52:7"
                },
                {
                  "expression": {
                    "argumentTypes": null,
                    "id": 1561,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "argumentTypes": null,
                      "baseExpression": {
                        "argumentTypes": null,
                        "expression": {
                          "argumentTypes": null,
                          "id": 1552,
                          "name": "tellor",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 1033,
                          "src": "875:6:7",
                          "typeDescriptions": {
                            "typeIdentifier": "t_struct$_TellorStorageStruct_$5737_storage",
                            "typeString": "struct TellorStorage.TellorStorageStruct storage ref"
                          }
                        },
                        "id": 1557,
                        "isConstant": false,
                        "isLValue": true,
                        "isPure": false,
                        "lValueRequested": false,
                        "memberName": "addressVars",
                        "nodeType": "MemberAccess",
                        "referencedDeclaration": 5687,
                        "src": "875:18:7",
                        "typeDescriptions": {
                          "typeIdentifier": "t_mapping$_t_bytes32_$_t_address_$",
                          "typeString": "mapping(bytes32 => address)"
                        }
                      },
                      "id": 1558,
                      "indexExpression": {
                        "argumentTypes": null,
                        "arguments": [
                          {
                            "argumentTypes": null,
                            "hexValue": "5f6465697479",
                            "id": 1555,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "kind": "string",
                            "lValueRequested": false,
                            "nodeType": "Literal",
                            "src": "904:8:7",
                            "subdenomination": null,
                            "typeDescriptions": {
                              "typeIdentifier": "t_stringliteral_c72fb71df90ec89e61e8dea6fee5142880a8a329caaae9ff4931955d88f59990",
                              "typeString": "literal_string \"_deity\""
                            },
                            "value": "_deity"
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_stringliteral_c72fb71df90ec89e61e8dea6fee5142880a8a329caaae9ff4931955d88f59990",
                              "typeString": "literal_string \"_deity\""
                            }
                          ],
                          "id": 1554,
                          "name": "keccak256",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 7796,
                          "src": "894:9:7",
                          "typeDescriptions": {
                            "typeIdentifier": "t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$",
                            "typeString": "function (bytes memory) pure returns (bytes32)"
                          }
                        },
                        "id": 1556,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "functionCall",
                        "lValueRequested": false,
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "894:19:7",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes32",
                          "typeString": "bytes32"
                        }
                      },
                      "isConstant": false,
                      "isLValue": true,
                      "isPure": false,
                      "lValueRequested": true,
                      "nodeType": "IndexAccess",
                      "src": "875:39:7",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "argumentTypes": null,
                      "expression": {
                        "argumentTypes": null,
                        "id": 1559,
                        "name": "msg",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 7802,
                        "src": "917:3:7",
                        "typeDescriptions": {
                          "typeIdentifier": "t_magic_message",
                          "typeString": "msg"
                        }
                      },
                      "id": 1560,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberName": "sender",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": null,
                      "src": "917:10:7",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address_payable",
                        "typeString": "address payable"
                      }
                    },
                    "src": "875:52:7",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "id": 1562,
                  "nodeType": "ExpressionStatement",
                  "src": "875:52:7"
                },
                {
                  "expression": {
                    "argumentTypes": null,
                    "id": 1571,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "argumentTypes": null,
                      "baseExpression": {
                        "argumentTypes": null,
                        "expression": {
                          "argumentTypes": null,
                          "id": 1563,
                          "name": "tellor",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 1033,
                          "src": "938:6:7",
                          "typeDescriptions": {
                            "typeIdentifier": "t_struct$_TellorStorageStruct_$5737_storage",
                            "typeString": "struct TellorStorage.TellorStorageStruct storage ref"
                          }
                        },
                        "id": 1568,
                        "isConstant": false,
                        "isLValue": true,
                        "isPure": false,
                        "lValueRequested": false,
                        "memberName": "addressVars",
                        "nodeType": "MemberAccess",
                        "referencedDeclaration": 5687,
                        "src": "938:18:7",
                        "typeDescriptions": {
                          "typeIdentifier": "t_mapping$_t_bytes32_$_t_address_$",
                          "typeString": "mapping(bytes32 => address)"
                        }
                      },
                      "id": 1569,
                      "indexExpression": {
                        "argumentTypes": null,
                        "arguments": [
                          {
                            "argumentTypes": null,
                            "hexValue": "74656c6c6f72436f6e7472616374",
                            "id": 1566,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "kind": "string",
                            "lValueRequested": false,
                            "nodeType": "Literal",
                            "src": "967:16:7",
                            "subdenomination": null,
                            "typeDescriptions": {
                              "typeIdentifier": "t_stringliteral_d48fd09afdab521f4f69bd2af8177f60fb0709ce0f1b3d5b8a2e233a20453848",
                              "typeString": "literal_string \"tellorContract\""
                            },
                            "value": "tellorContract"
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_stringliteral_d48fd09afdab521f4f69bd2af8177f60fb0709ce0f1b3d5b8a2e233a20453848",
                              "typeString": "literal_string \"tellorContract\""
                            }
                          ],
                          "id": 1565,
                          "name": "keccak256",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 7796,
                          "src": "957:9:7",
                          "typeDescriptions": {
                            "typeIdentifier": "t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$",
                            "typeString": "function (bytes memory) pure returns (bytes32)"
                          }
                        },
                        "id": 1567,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "functionCall",
                        "lValueRequested": false,
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "957:27:7",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes32",
                          "typeString": "bytes32"
                        }
                      },
                      "isConstant": false,
                      "isLValue": true,
                      "isPure": false,
                      "lValueRequested": true,
                      "nodeType": "IndexAccess",
                      "src": "938:47:7",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "argumentTypes": null,
                      "id": 1570,
                      "name": "_tellorContract",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 1533,
                      "src": "987:15:7",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      }
                    },
                    "src": "938:64:7",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "id": 1572,
                  "nodeType": "ExpressionStatement",
                  "src": "938:64:7"
                },
                {
                  "eventCall": {
                    "argumentTypes": null,
                    "arguments": [
                      {
                        "argumentTypes": null,
                        "id": 1574,
                        "name": "_tellorContract",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 1533,
                        "src": "1035:15:7",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      ],
                      "id": 1573,
                      "name": "NewTellorAddress",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 1531,
                      "src": "1018:16:7",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_event_nonpayable$_t_address_$returns$__$",
                        "typeString": "function (address)"
                      }
                    },
                    "id": 1575,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "1018:33:7",
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 1576,
                  "nodeType": "EmitStatement",
                  "src": "1013:38:7"
                }
              ]
            },
            "documentation": "@dev The constructor sets the original `tellorStorageOwner` of the contract to the sender\r\naccount, the tellor contract to the Tellor master address and owner to the Tellor master owner address \r\n@param _tellorContract is the address for the tellor contract\r",
            "id": 1578,
            "implemented": true,
            "kind": "constructor",
            "modifiers": [],
            "name": "",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 1534,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 1533,
                  "name": "_tellorContract",
                  "nodeType": "VariableDeclaration",
                  "scope": 1578,
                  "src": "745:23:7",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 1532,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "745:7:7",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "744:25:7"
            },
            "returnParameters": {
              "id": 1535,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "777:0:7"
            },
            "scope": 1622,
            "src": "732:327:7",
            "stateMutability": "nonpayable",
            "superFunction": null,
            "visibility": "public"
          },
          {
            "body": {
              "id": 1589,
              "nodeType": "Block",
              "src": "1324:48:7",
              "statements": [
                {
                  "expression": {
                    "argumentTypes": null,
                    "arguments": [
                      {
                        "argumentTypes": null,
                        "id": 1586,
                        "name": "_newDeity",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 1580,
                        "src": "1354:9:7",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      ],
                      "expression": {
                        "argumentTypes": null,
                        "id": 1583,
                        "name": "tellor",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 1033,
                        "src": "1335:6:7",
                        "typeDescriptions": {
                          "typeIdentifier": "t_struct$_TellorStorageStruct_$5737_storage",
                          "typeString": "struct TellorStorage.TellorStorageStruct storage ref"
                        }
                      },
                      "id": 1585,
                      "isConstant": false,
                      "isLValue": true,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberName": "changeDeity",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": 2823,
                      "src": "1335:18:7",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_nonpayable$_t_struct$_TellorStorageStruct_$5737_storage_ptr_$_t_address_$returns$__$bound_to$_t_struct$_TellorStorageStruct_$5737_storage_ptr_$",
                        "typeString": "function (struct TellorStorage.TellorStorageStruct storage pointer,address)"
                      }
                    },
                    "id": 1587,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "1335:29:7",
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 1588,
                  "nodeType": "ExpressionStatement",
                  "src": "1335:29:7"
                }
              ]
            },
            "documentation": "@dev Gets the 5 miners who mined the value for the specified requestId/_timestamp \r\n@dev Only needs to be in library\r\n@param _newDeity the new Deity in the contract\r",
            "id": 1590,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "changeDeity",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 1581,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 1580,
                  "name": "_newDeity",
                  "nodeType": "VariableDeclaration",
                  "scope": 1590,
                  "src": "1297:17:7",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 1579,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "1297:7:7",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "1296:19:7"
            },
            "returnParameters": {
              "id": 1582,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "1324:0:7"
            },
            "scope": 1622,
            "src": "1276:96:7",
            "stateMutability": "nonpayable",
            "superFunction": null,
            "visibility": "external"
          },
          {
            "body": {
              "id": 1601,
              "nodeType": "Block",
              "src": "1632:63:7",
              "statements": [
                {
                  "expression": {
                    "argumentTypes": null,
                    "arguments": [
                      {
                        "argumentTypes": null,
                        "id": 1598,
                        "name": "_tellorContract",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 1592,
                        "src": "1671:15:7",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      ],
                      "expression": {
                        "argumentTypes": null,
                        "id": 1595,
                        "name": "tellor",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 1033,
                        "src": "1643:6:7",
                        "typeDescriptions": {
                          "typeIdentifier": "t_struct$_TellorStorageStruct_$5737_storage",
                          "typeString": "struct TellorStorage.TellorStorageStruct storage ref"
                        }
                      },
                      "id": 1597,
                      "isConstant": false,
                      "isLValue": true,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberName": "changeTellorContract",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": 2857,
                      "src": "1643:27:7",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_nonpayable$_t_struct$_TellorStorageStruct_$5737_storage_ptr_$_t_address_$returns$__$bound_to$_t_struct$_TellorStorageStruct_$5737_storage_ptr_$",
                        "typeString": "function (struct TellorStorage.TellorStorageStruct storage pointer,address)"
                      }
                    },
                    "id": 1599,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "1643:44:7",
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 1600,
                  "nodeType": "ExpressionStatement",
                  "src": "1643:44:7"
                }
              ]
            },
            "documentation": "@dev  allows for the deity to make fast upgrades.  Deity should be 0 address if decentralized\r\n@param _tellorContract the address of the new Tellor Contract\r",
            "id": 1602,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "changeTellorContract",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 1593,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 1592,
                  "name": "_tellorContract",
                  "nodeType": "VariableDeclaration",
                  "scope": 1602,
                  "src": "1599:23:7",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 1591,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "1599:7:7",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "1598:25:7"
            },
            "returnParameters": {
              "id": 1594,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "1632:0:7"
            },
            "scope": 1622,
            "src": "1569:126:7",
            "stateMutability": "nonpayable",
            "superFunction": null,
            "visibility": "external"
          },
          {
            "body": {
              "id": 1620,
              "nodeType": "Block",
              "src": "1867:648:7",
              "statements": [
                {
                  "assignments": [
                    1606
                  ],
                  "declarations": [
                    {
                      "constant": false,
                      "id": 1606,
                      "name": "addr",
                      "nodeType": "VariableDeclaration",
                      "scope": 1620,
                      "src": "1878:12:7",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      },
                      "typeName": {
                        "id": 1605,
                        "name": "address",
                        "nodeType": "ElementaryTypeName",
                        "src": "1878:7:7",
                        "stateMutability": "nonpayable",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      "value": null,
                      "visibility": "internal"
                    }
                  ],
                  "id": 1613,
                  "initialValue": {
                    "argumentTypes": null,
                    "baseExpression": {
                      "argumentTypes": null,
                      "expression": {
                        "argumentTypes": null,
                        "id": 1607,
                        "name": "tellor",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 1033,
                        "src": "1893:6:7",
                        "typeDescriptions": {
                          "typeIdentifier": "t_struct$_TellorStorageStruct_$5737_storage",
                          "typeString": "struct TellorStorage.TellorStorageStruct storage ref"
                        }
                      },
                      "id": 1608,
                      "isConstant": false,
                      "isLValue": true,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberName": "addressVars",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": 5687,
                      "src": "1893:18:7",
                      "typeDescriptions": {
                        "typeIdentifier": "t_mapping$_t_bytes32_$_t_address_$",
                        "typeString": "mapping(bytes32 => address)"
                      }
                    },
                    "id": 1612,
                    "indexExpression": {
                      "argumentTypes": null,
                      "arguments": [
                        {
                          "argumentTypes": null,
                          "hexValue": "74656c6c6f72436f6e7472616374",
                          "id": 1610,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "kind": "string",
                          "lValueRequested": false,
                          "nodeType": "Literal",
                          "src": "1922:16:7",
                          "subdenomination": null,
                          "typeDescriptions": {
                            "typeIdentifier": "t_stringliteral_d48fd09afdab521f4f69bd2af8177f60fb0709ce0f1b3d5b8a2e233a20453848",
                            "typeString": "literal_string \"tellorContract\""
                          },
                          "value": "tellorContract"
                        }
                      ],
                      "expression": {
                        "argumentTypes": [
                          {
                            "typeIdentifier": "t_stringliteral_d48fd09afdab521f4f69bd2af8177f60fb0709ce0f1b3d5b8a2e233a20453848",
                            "typeString": "literal_string \"tellorContract\""
                          }
                        ],
                        "id": 1609,
                        "name": "keccak256",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 7796,
                        "src": "1912:9:7",
                        "typeDescriptions": {
                          "typeIdentifier": "t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$",
                          "typeString": "function (bytes memory) pure returns (bytes32)"
                        }
                      },
                      "id": 1611,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": true,
                      "kind": "functionCall",
                      "lValueRequested": false,
                      "names": [],
                      "nodeType": "FunctionCall",
                      "src": "1912:27:7",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bytes32",
                        "typeString": "bytes32"
                      }
                    },
                    "isConstant": false,
                    "isLValue": true,
                    "isPure": false,
                    "lValueRequested": false,
                    "nodeType": "IndexAccess",
                    "src": "1893:47:7",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "nodeType": "VariableDeclarationStatement",
                  "src": "1878:62:7"
                },
                {
                  "assignments": [
                    1615
                  ],
                  "declarations": [
                    {
                      "constant": false,
                      "id": 1615,
                      "name": "_calldata",
                      "nodeType": "VariableDeclaration",
                      "scope": 1620,
                      "src": "1951:22:7",
                      "stateVariable": false,
                      "storageLocation": "memory",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bytes_memory_ptr",
                        "typeString": "bytes"
                      },
                      "typeName": {
                        "id": 1614,
                        "name": "bytes",
                        "nodeType": "ElementaryTypeName",
                        "src": "1951:5:7",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes_storage_ptr",
                          "typeString": "bytes"
                        }
                      },
                      "value": null,
                      "visibility": "internal"
                    }
                  ],
                  "id": 1618,
                  "initialValue": {
                    "argumentTypes": null,
                    "expression": {
                      "argumentTypes": null,
                      "id": 1616,
                      "name": "msg",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 7802,
                      "src": "1976:3:7",
                      "typeDescriptions": {
                        "typeIdentifier": "t_magic_message",
                        "typeString": "msg"
                      }
                    },
                    "id": 1617,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "memberName": "data",
                    "nodeType": "MemberAccess",
                    "referencedDeclaration": null,
                    "src": "1976:8:7",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes_calldata_ptr",
                      "typeString": "bytes calldata"
                    }
                  },
                  "nodeType": "VariableDeclarationStatement",
                  "src": "1951:33:7"
                },
                {
                  "externalReferences": [
                    {
                      "_calldata": {
                        "declaration": 1615,
                        "isOffset": false,
                        "isSlot": false,
                        "src": "2088:9:7",
                        "valueSize": 1
                      }
                    },
                    {
                      "_calldata": {
                        "declaration": 1615,
                        "isOffset": false,
                        "isSlot": false,
                        "src": "2064:9:7",
                        "valueSize": 1
                      }
                    },
                    {
                      "addr": {
                        "declaration": 1606,
                        "isOffset": false,
                        "isSlot": false,
                        "src": "2054:4:7",
                        "valueSize": 1
                      }
                    }
                  ],
                  "id": 1619,
                  "nodeType": "InlineAssembly",
                  "operations": "{\n    let result := delegatecall(not(0), addr, add(_calldata, 0x20), mload(_calldata), 0, 0)\n    let size := returndatasize()\n    let ptr := mload(0x40)\n    returndatacopy(ptr, 0, size)\n    switch result\n    case 0 {\n        revert(ptr, size)\n    }\n    default {\n        return(ptr, size)\n    }\n}",
                  "src": "1995:513:7"
                }
              ]
            },
            "documentation": "@dev This is the fallback function that allows contracts to call the tellor contract at the address stored\r",
            "id": 1621,
            "implemented": true,
            "kind": "fallback",
            "modifiers": [],
            "name": "",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 1603,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "1847:2:7"
            },
            "returnParameters": {
              "id": 1604,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "1867:0:7"
            },
            "scope": 1622,
            "src": "1838:677:7",
            "stateMutability": "payable",
            "superFunction": null,
            "visibility": "external"
          }
        ],
        "scope": 1623,
        "src": "336:2182:7"
      }
    ],
    "src": "0:2518:7"
  },
  "compiler": {
    "name": "solc",
    "version": "0.5.8+commit.23d335f2.Emscripten.clang"
  },
  "networks": {},
  "schemaVersion": "3.0.16",
  "updatedAt": "2019-09-23T01:07:00.358Z",
  "devdoc": {
    "details": "This is the Master contract with all tellor getter functions and delegate call to Tellor. \r The logic for the functions on this contract is saved on the TellorGettersLibrary, TellorTransfer, \r TellorGettersLibrary, and TellorStake\r",
    "methods": {
      "allowance(address,address)": {
        "params": {
          "_spender": "address\r",
          "_user": "address\r"
        },
        "return": "Returns the remaining allowance of tokens granted to the _spender from the _user\r"
      },
      "allowedToTrade(address,uint256)": {
        "details": "This function returns whether or not a given user is allowed to trade a given amount  \r",
        "params": {
          "_amount": "uint of amount\r",
          "_user": "address\r"
        },
        "return": "true if the user is alloed to trade the amount specified\r"
      },
      "balanceOf(address)": {
        "details": "Gets balance of owner specified\r",
        "params": {
          "_user": "is the owner address used to look up the balance\r"
        },
        "return": "Returns the balance associated with the passed in _user\r"
      },
      "balanceOfAt(address,uint256)": {
        "details": "Queries the balance of _user at a specific _blockNumber\r",
        "params": {
          "_blockNumber": "The block number when the balance is queried\r",
          "_user": "The address from which the balance will be retrieved\r"
        },
        "return": "The balance at _blockNumber\r"
      },
      "changeDeity(address)": {
        "details": "Gets the 5 miners who mined the value for the specified requestId/_timestamp \rOnly needs to be in library\r",
        "params": {
          "_newDeity": "the new Deity in the contract\r"
        }
      },
      "changeTellorContract(address)": {
        "details": "allows for the deity to make fast upgrades.  Deity should be 0 address if decentralized\r",
        "params": {
          "_tellorContract": "the address of the new Tellor Contract\r"
        }
      },
      "constructor": {
        "details": "The constructor sets the original `tellorStorageOwner` of the contract to the sender\r account, the tellor contract to the Tellor master address and owner to the Tellor master owner address \r",
        "params": {
          "_tellorContract": "is the address for the tellor contract\r"
        }
      },
      "didMine(bytes32,address)": {
        "details": "This function tells you if a given challenge has been completed by a given miner\r",
        "params": {
          "_challenge": "the challenge to search for\r",
          "_miner": "address that you want to know if they solved the challenge\r"
        },
        "return": "true if the _miner address provided solved the \r"
      },
      "didVote(uint256,address)": {
        "details": "Checks if an address voted in a given dispute\r",
        "params": {
          "_address": "to look up\r",
          "_disputeId": "to look up\r"
        },
        "return": "bool of whether or not party voted\r"
      },
      "getAddressVars(bytes32)": {
        "details": "allows Tellor to read data from the addressVars mapping\r",
        "params": {
          "_data": "is the keccak256(\"variable_name\") of the variable that is being accessed. \r These are examples of how the variables are saved within other functions:\r addressVars[keccak256(\"_owner\")]\r addressVars[keccak256(\"tellorContract\")]\r"
        }
      },
      "getAllDisputeVars(uint256)": {
        "details": "Gets all dispute variables\r",
        "params": {
          "_disputeId": "to look up\r"
        },
        "return": "bytes32 hash of dispute \rbool executed where true if it has been voted on\rbool disputeVotePassed\rbool isPropFork true if the dispute is a proposed fork\raddress of reportedMiner\raddress of reportingParty\raddress of proposedForkAddress\ruint of requestId\ruint of timestamp\ruint of value\ruint of minExecutionDate\ruint of numberOfVotes\ruint of blocknumber\ruint of minerSlot\ruint of quorum\ruint of fee\rint count of the current tally\r"
      },
      "getCurrentVariables()": {
        "details": "Getter function for variables for the requestId being currently mined(currentRequestId)\r",
        "return": "current challenge, curretnRequestId, level of difficulty, api/query string, and granularity(number of decimals requested), total tip for the request \r"
      },
      "getDisputeIdByDisputeHash(bytes32)": {
        "details": "Checks if a given hash of miner,requestId has been disputed\r",
        "params": {
          "_hash": "is the sha256(abi.encodePacked(_miners[2],_requestId));\r"
        },
        "return": "uint disputeId\r"
      },
      "getDisputeUintVars(uint256,bytes32)": {
        "details": "Checks for uint variables in the disputeUintVars mapping based on the disuputeId\r",
        "params": {
          "_data": "the variable to pull from the mapping. _data = keccak256(\"variable_name\") where variable_name is \r the variables/strings used to save the data in the mapping. The variables names are  \r commented out under the disputeUintVars under the Dispute struct\r",
          "_disputeId": "is the dispute id;\r"
        },
        "return": "uint value for the bytes32 data submitted\r"
      },
      "getLastNewValue()": {
        "details": "Gets the a value for the latest timestamp available\r",
        "return": "value for timestamp of last proof of work submited\rtrue if the is a timestamp for the lastNewValue\r"
      },
      "getLastNewValueById(uint256)": {
        "details": "Gets the a value for the latest timestamp available\r",
        "params": {
          "_requestId": "being requested\r"
        },
        "return": "value for timestamp of last proof of work submited and if true if it exist or 0 and false if it doesn't\r"
      },
      "getMinedBlockNum(uint256,uint256)": {
        "details": "Gets blocknumber for mined timestamp \r",
        "params": {
          "_requestId": "to look up\r",
          "_timestamp": "is the timestamp to look up blocknumber\r"
        },
        "return": "uint of the blocknumber which the dispute was mined\r"
      },
      "getMinersByRequestIdAndTimestamp(uint256,uint256)": {
        "details": "Gets the 5 miners who mined the value for the specified requestId/_timestamp \r",
        "params": {
          "_requestId": "to look up\r",
          "_timestamp": "is the timestamp to look up miners for\r"
        },
        "return": "the 5 miners' addresses\r"
      },
      "getName()": {
        "details": "Get the name of the token\r return string of the token name\r"
      },
      "getNewValueCountbyRequestId(uint256)": {
        "details": "Counts the number of values that have been submited for the request \r if called for the currentRequest being mined it can tell you how many miners have submitted a value for that\r request so far\r",
        "params": {
          "_requestId": "the requestId to look up\r"
        },
        "return": "uint count of the number of values received for the requestId\r"
      },
      "getRequestIdByQueryHash(bytes32)": {
        "details": "Getter function for requestId based on the queryHash\r",
        "params": {
          "_request": "is the hash(of string api and granularity) to check if a request already exists\r"
        },
        "return": "uint requestId\r"
      },
      "getRequestIdByRequestQIndex(uint256)": {
        "details": "Getter function for the specified requestQ index\r",
        "params": {
          "_index": "to look up in the requestQ array\r"
        },
        "return": "uint of reqeuestId\r"
      },
      "getRequestIdByTimestamp(uint256)": {
        "details": "Getter function for requestId based on timestamp \r",
        "params": {
          "_timestamp": "to check requestId\r"
        },
        "return": "uint of reqeuestId\r"
      },
      "getRequestQ()": {
        "details": "Getter function for the requestQ array\r",
        "return": "the requestQ arrray\r"
      },
      "getRequestUintVars(uint256,bytes32)": {
        "details": "Allowes access to the uint variables saved in the apiUintVars under the requestDetails struct\r for the requestId specified\r",
        "params": {
          "_data": "the variable to pull from the mapping. _data = keccak256(\"variable_name\") where variable_name is \r the variables/strings used to save the data in the mapping. The variables names are  \r commented out under the apiUintVars under the requestDetails struct\r",
          "_requestId": "to look up\r"
        },
        "return": "uint value of the apiUintVars specified in _data for the requestId specified\r"
      },
      "getRequestVars(uint256)": {
        "details": "Gets the API struct variables that are not mappings\r",
        "params": {
          "_requestId": "to look up\r"
        },
        "return": "string of api to query\rstring of symbol of api to query\rbytes32 hash of string\rbytes32 of the granularity(decimal places) requested\ruint of index in requestQ array\ruint of current payout/tip for this requestId\r"
      },
      "getStakerInfo(address)": {
        "details": "This function allows users to retireve all information about a staker\r",
        "params": {
          "_staker": "address of staker inquiring about\r"
        },
        "return": "uint current state of staker\ruint startDate of staking\r"
      },
      "getSubmissionsByTimestamp(uint256,uint256)": {
        "details": "Gets the 5 miners who mined the value for the specified requestId/_timestamp \r",
        "params": {
          "_requestId": "to look up\r",
          "_timestamp": "is the timestampt to look up miners for\r"
        },
        "return": "address[5] array of 5 addresses ofminers that mined the requestId\r"
      },
      "getSymbol()": {
        "details": "Get the symbol of the token\r return string of the token symbol\r"
      },
      "getTimestampbyRequestIDandIndex(uint256,uint256)": {
        "details": "Gets the timestamp for the value based on their index\r",
        "params": {
          "_index": "is the value index to look up\r",
          "_requestID": "is the requestId to look up\r"
        },
        "return": "uint timestamp\r"
      },
      "getUintVar(bytes32)": {
        "details": "Getter for the variables saved under the TellorStorageStruct uintVars variable\r",
        "params": {
          "_data": "the variable to pull from the mapping. _data = keccak256(\"variable_name\") where variable_name is \r the variables/strings used to save the data in the mapping. The variables names are  \r commented out under the uintVars under the TellorStorageStruct struct\r This is an example of how data is saved into the mapping within other functions: \r self.uintVars[keccak256(\"stakerCount\")]\r"
        },
        "return": "uint of specified variable  \r"
      },
      "getVariablesOnDeck()": {
        "details": "Getter function for next requestId on queue/request with highest payout at time the function is called\r",
        "return": "onDeck/info on request with highest payout-- RequestId, Totaltips, and API query string\r"
      },
      "isInDispute(uint256,uint256)": {
        "details": "Gets the 5 miners who mined the value for the specified requestId/_timestamp \r",
        "params": {
          "_requestId": "to look up\r",
          "_timestamp": "is the timestamp to look up miners for\r"
        },
        "return": "bool true if requestId/timestamp is under dispute\r"
      },
      "retrieveData(uint256,uint256)": {
        "details": "Retreive value from oracle based on timestamp\r",
        "params": {
          "_requestId": "being requested\r",
          "_timestamp": "to retreive data/value from\r"
        },
        "return": "value for timestamp submitted\r"
      },
      "totalSupply()": {
        "details": "Getter for the total_supply of oracle tokens\r",
        "return": "uint total supply\r"
      }
    },
    "title": "Tellor Master\r"
  },
  "userdoc": {
    "methods": {}
  }
}